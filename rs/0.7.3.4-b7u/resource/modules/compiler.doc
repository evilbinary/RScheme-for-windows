(compiler (mlink corelib tables mathlib objsys low-scheme iolib *scheme* primops precore) (<ic-cast> make-lexrec-envt set-loop-var! super-type expand-key-args* compile/let-syntax *do-inlining* *unbound-vars-created* make-letrec var compile/multi $raw-true compile-time-const? compile/named-let* <target-gf1> <compile-error> *implements-loaders* match-context-cancel some-info set-if-true! set-super-type! error/syntax match-context-dyn-envt new-prim-type set-mode! bind-name! <ic-call-prim> first-arg-reg find-setter-match class-tlv? aliased-var compile/named-let eval-stack-union-member-stem <ic-lex-set> obj-expr next-lambda-name eval-implements/feature set-compiler-description! <prim-type> *primtype-table* new-raw-type compile-ref <syntax-error> lookup-aliased ct-compatible-type? qq-special define-write-method trust-me-type? get-compiler-basis set-eval-stack-union-member-stem! compile-point-file-and-line add-special-form-compiler! error-description compile/set! compile compile/mquote wrap-in-conversions do-inlining set-inits! make-const *procedure-name* condition ct-envt set-compiler-basis-generator! multi-checked-coerce match-type? icode? const-tlv? make-lexical-envt parse-arg-spec/rscheme compiler-description make-aliased-vars set-function! parse-const-expr set-does-lambda?! set-vars-referenced! set-loop-icode! *unspecified-keywords-are-required?* compile/let-bdg ever-set? set-arg-list! *lookup-dyn-envt* rhs set-condition! compile/combo set-compiler-proc! primtype-raw? set-first-arg-reg! set-error-description! eval-implements stmt-list find-match set-in-procedure! current-source-point <ic-lambda> native-class->prim-type-name slot-sealed? set-code-properties! set-preferred-class! warn-about-unbound-vars-created qq* compiler-proc <target-method> strip-coercions <warning> set-c-type-name! compile/with-module assign-qq-arg ct-type->prim-type-name set-trust-me-type?! set-if-false! untop set-error-args! checker-primop-for-type set-sub-types! <ic-lex-ref> <special-form> <compile-point> set-syntax-checker! compile-expr special-form-compiler->proc <expr-icode> <ic-multi> does-save? core-compiler->proc new-obj-prim-type compile/non-top-body set-stmt-list! *leadins* all-but-last primtype->checker-primop compile/values prim-subtype? compute-has-rest compile/lambda compile/bind compile/quote add-globally-implemented! error-args self-evaluating? the-top-level compute-specializers vars-captured compile/if-implements multi-bind-assoc! error/internal lookup-from-imported-module <target-getter> error/syntax* compile-syntax-form compile/cond-expand rest? loop-var <loop-var> *special-form-compilers* find bind! gen-rscheme-spec new-obj-prim-type* code-properties *qq-args* set-some-info! expand-1-key-arg num-args compile-with-ad-hoc-sf coerces-to <ic-call> binding-isa-subst <ic-tl-set> install-type-checks-in-inits! make-special-forms fold-const <substitution-site-record> set-equivalent-types! set-rest?! set-type! compile/if usage-check set-recognizer-primop! current-place-name <semantic-error> set-aliased-var! compile/let compile-macro match-context-lookup copy-top-level-contour class-constant? type-for-each-arg error-location find-subst-site bind-to-code set-num-args! set-return-types! compile-point-stack process-formals$ error/semantic* compile-error-class <ic-if> ct-unraw-type set-error-location! *basis-generator* macro? tl-bind! mfg-multi-return coerce-aml-list <target-function> type qq-pair expand-special-args-if-any current-location-lookup prim-type->class label <target-closure> set-label! current-location-table compile/quasiquote in-implements-list? recognizer-primop specifier->lex-var ct-unprim-type <icode> preferred-class if-true inlined-version mfg-required-type-checks inline-setter parse-rqd-spec target-class->prim-type-name compile-head in-procedure <ic-bind> prim-compatible-type? primop-does-coercion make-lex-vars dynamic-enclosing-chain *parsed-formals-proto* <ic-jump> compile/letrec prim-conversion <ic-const> current-procedure-name expand-key-args proc set-ever-set?! compile-FUNCTION set-in-lex-envt! prim-type-coercion <ic-seq> compile/list compile/begin make-no-values compute-min-args make-top-level-contour remove-globally-implemented! equivalent-types error/semantic prim-type-coercion-chain set-rhs! mode set-var! compile/procedure target-class? *basis* install-type-checks-in-body! push-withs set-proc! substitution? <alias-contour> <ic-loop> compile-keyword-list *globally-implemented* set-slot-was-inlined! return-types lookup-prim-type primtype-setup compile-with-full-semantics c-type-name compile/body shallow-lookup check-restricted-pattern qq-main *place* class-recognizer compile/bdg $raw-false coerce-basic-aml compile-time-const-value <ic-tl-ref> const-type match inline-getter target-subclass? vars-referenced *source-point* *num-lambdas* num-bindings make-combo <target-setter> set-ct-envt! <with-envt> sub-types warning parse-arg-spec type-checked-expr* set-coerces-to! <lexical-var> first-return-type in-lex-envt qq-vector for-each-keyword lexical-compare-list syntax-checker match-context-add-subst qq make-export-implementation-bdg <<target-class>> gen-ctc inits if-false compile/letrec-syntax choose-loadable-implementation append-source-property match-args *coercion-primop-table* does-lambda? map-car special-form-compiler multi-bind! choose-loaded-implementation set-vars-captured! slot-was-inlined? compile/symbol function compile-set parse-formals loop-icode new-prim-type* <ic-procedure> lookup-no-alias set-does-save?! lookup arg-list compile/top-body coerced-expr parse-arg-spec/dylan compute-num-args gen-assert-type set-compile-with-full-semantics! well-known expand-special-args coerce-aml raw-bool-expr compile/well-known-function lexical-enclosing-chain parse-type-expr objs-only-envt) (("bytcodes/primtype.scm" class <prim-type> ()) ("bytcodes/primtype.scm" variable *primtype-table* ()) ("bytcodes/primtype.scm" variable *coercion-primop-table* ()) ("bytcodes/primtype.scm" function lookup-prim-type ()) ("bytcodes/primtype.scm" function primop-does-coercion ()) ("bytcodes/primtype.scm" function prim-type-coercion ()) ("bytcodes/primtype.scm" function prim-type-coercion-chain ()) ("bytcodes/primtype.scm" function new-prim-type ()) ("bytcodes/primtype.scm" syntax new-prim-type* ()) ("bytcodes/primtype.scm" syntax new-raw-type ()) ("bytcodes/primtype.scm" syntax new-obj-prim-type ()) ("bytcodes/primtype.scm" syntax new-obj-prim-type* ()) ("bytcodes/primtype.scm" function primtype-raw? ()) ("bytcodes/primtype.scm" function primtype-setup ()) ("bytcodes/primtype.scm" function prim-compatible-type? ()) ("bytcodes/primtype.scm" function prim-conversion ()) ("bytcodes/primtype.scm" function prim-subtype? ()) ("modules/compiler/native.scm" syntax target-class? ()) ("modules/compiler/classes.scm" class <icode> ()) ("modules/compiler/classes.scm" class <expr-icode> ()) ("modules/compiler/classes.scm" class <ic-multi> ()) ("modules/compiler/classes.scm" class <ic-call> ()) ("modules/compiler/classes.scm" class <ic-cast> ()) ("modules/compiler/classes.scm" class <ic-call-prim> ()) ("modules/compiler/classes.scm" class <ic-bind> ()) ("modules/compiler/classes.scm" class <ic-tl-ref> ()) ("modules/compiler/classes.scm" class <ic-lex-ref> ()) ("modules/compiler/classes.scm" class <ic-tl-set> ()) ("modules/compiler/classes.scm" class <ic-lex-set> ()) ("modules/compiler/classes.scm" class <ic-if> ()) ("modules/compiler/classes.scm" class <ic-const> ()) ("modules/compiler/classes.scm" class <ic-procedure> ()) ("modules/compiler/classes.scm" class <ic-lambda> ()) ("modules/compiler/classes.scm" class <ic-seq> ()) ("modules/compiler/classes.scm" class <ic-loop> ()) ("modules/compiler/classes.scm" class <ic-jump> ()) ("modules/compiler/classes.scm" class <special-form> ()) ("modules/compiler/classes.scm" function special-form-compiler ()) ("modules/compiler/classes.scm" class <lexical-var> ()) ("modules/compiler/classes.scm" class <loop-var> ()) ("modules/compiler/classes.scm" class <substitution-site-record> ()) ("modules/compiler/bdgs.scm" variable *basis* ()) ("modules/compiler/bdgs.scm" variable *basis-generator* ()) ("modules/compiler/bdgs.scm" function get-compiler-basis ()) ("modules/compiler/bdgs.scm" function set-compiler-basis-generator! ()) ("modules/compiler/bdgs.scm" function well-known ()) ("modules/compiler/bdgs.scm" function macro? ()) ("modules/compiler/bdgs.scm" function substitution? ()) ("modules/compiler/bdgs.scm" method write-object ()) ("modules/compiler/bdgs.scm" method write-object ()) ("modules/compiler/bdgs.scm" method write-object ()) ("modules/compiler/bdgs.scm" method to-string ()) ("modules/compiler/bdgs.scm" function type-for-each-arg ()) ("modules/compiler/bdgs.scm" method compile-head ()) ("modules/compiler/bdgs.scm" method compile-ref ()) ("modules/compiler/bdgs.scm" method compile-set ()) ("modules/compiler/bdgs.scm" method compile-head ()) ("modules/compiler/bdgs.scm" method compile-ref ()) ("modules/compiler/bdgs.scm" method compile-set ()) ("modules/compiler/bdgs.scm" method compile-head ()) ("modules/compiler/bdgs.scm" method compile-ref ()) ("modules/compiler/bdgs.scm" method compile-set ()) ("modules/compiler/bdgs.scm" method compile-head ()) ("modules/compiler/bdgs.scm" method compile-ref ()) ("modules/compiler/bdgs.scm" method compile-set ()) ("modules/compiler/bdgs.scm" method compile-head ()) ("modules/compiler/bdgs.scm" method full-procedure-bdg ()) ("modules/compiler/bdgs.scm" method compile-ref ()) ("modules/compiler/bdgs.scm" method compile-set ()) ("modules/compiler/bdgs.scm" method compile-ref ()) ("modules/compiler/bdgs.scm" method compile-head ()) ("modules/compiler/bdgs.scm" method compile-set ()) ("modules/compiler/bdgs.scm" method compile-head ()) ("modules/compiler/bdgs.scm" method compile-ref ()) ("modules/compiler/bdgs.scm" method compile-set ()) ("modules/compiler/icode.scm" function icode? ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method first-return-type ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method return-types ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" function const-type ()) ("modules/compiler/icode.scm" function make-const ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method num-args ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method write-object ()) ("modules/compiler/icode.scm" method write-object ()) ("modules/compiler/icode.scm" method write-object ()) ("modules/compiler/icode.scm" method write-object ()) ("modules/compiler/icode.scm" method write-object ()) ("modules/compiler/icode.scm" method write-object ()) ("modules/compiler/icode.scm" method write-object ()) ("modules/compiler/icode.scm" method write-object ()) ("modules/compiler/icode.scm" method write-object ()) ("modules/compiler/icode.scm" method write-object ()) ("modules/compiler/icode.scm" method num-args ()) ("modules/compiler/icode.scm" method rest? ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/icode.scm" method initialize ()) ("modules/compiler/mainc.scm" class <compile-point> ()) ("modules/compiler/mainc.scm" function compile ()) ("modules/compiler/mainc.scm" function untop ()) ("modules/compiler/mainc.scm" method compile-expr ()) ("modules/compiler/mainc.scm" method compile-expr ()) ("modules/compiler/mainc.scm" method compile-expr ()) ("modules/compiler/mainc.scm" method self-evaluating? ()) ("modules/compiler/mainc.scm" method self-evaluating? ()) ("modules/compiler/mainc.scm" method self-evaluating? ()) ("modules/compiler/mainc.scm" method self-evaluating? ()) ("modules/compiler/mainc.scm" method self-evaluating? ()) ("modules/compiler/mainc.scm" method self-evaluating? ()) ("modules/compiler/mainc.scm" variable *unbound-vars-created* ()) ("modules/compiler/mainc.scm" function find ()) ("modules/compiler/mainc.scm" function warn-about-unbound-vars-created ()) ("modules/compiler/mainc.scm" function compile/list ()) ("modules/compiler/mainc.scm" function compile/combo ()) ("modules/compiler/mainc.scm" function make-combo ()) ("modules/compiler/mainc.scm" function compile/multi ()) ("modules/compiler/mainc.scm" function make-no-values ()) ("modules/compiler/mainc.scm" function current-procedure-name ()) ("modules/compiler/mainc.scm" function current-place-name ()) ("modules/compiler/mainc.scm" function next-lambda-name ()) ("modules/compiler/cmplproc.scm" variable *leadins* ()) ("modules/compiler/cmplproc.scm" variable *parsed-formals-proto* ()) ("modules/compiler/cmplproc.scm" function parse-formals ()) ("modules/compiler/cmplproc.scm" function expand-special-args-if-any ()) ("modules/compiler/cmplproc.scm" function expand-special-args ()) ("modules/compiler/cmplproc.scm" function expand-key-args ()) ("modules/compiler/cmplproc.scm" function expand-key-args* ()) ("modules/compiler/cmplproc.scm" variable *unspecified-keywords-are-required?* ()) ("modules/compiler/cmplproc.scm" function expand-1-key-arg ()) ("modules/compiler/cmplproc.scm" function gen-rscheme-spec ()) ("modules/compiler/cmplproc.scm" function parse-arg-spec/dylan ()) ("modules/compiler/cmplproc.scm" function parse-arg-spec/rscheme ()) ("modules/compiler/cmplproc.scm" function parse-arg-spec ()) ("modules/compiler/cmplproc.scm" function parse-rqd-spec ()) ("modules/compiler/cmplproc.scm" function compile/procedure ()) ("modules/compiler/body.scm" function compile/body ()) ("modules/compiler/body.scm" function compile/top-body ()) ("modules/compiler/body.scm" function compile/non-top-body ()) ("modules/compiler/sforms.scm" function compile/values ()) ("modules/compiler/sforms.scm" function compile/begin ()) ("modules/compiler/sforms.scm" function compile/let ()) ("modules/compiler/sforms.scm" function map-car ()) ("modules/compiler/sforms.scm" function compile/named-let* ()) ("modules/compiler/sforms.scm" function compile/named-let ()) ("modules/compiler/sforms.scm" function make-letrec ()) ("modules/compiler/sforms.scm" function compile/letrec ()) ("modules/compiler/sforms.scm" function compile/let-bdg ()) ("modules/compiler/sforms.scm" function all-but-last ()) ("modules/compiler/sforms.scm" function compile/bind ()) ("modules/compiler/sforms.scm" function compile/let-syntax ()) ("modules/compiler/sforms.scm" function compile/letrec-syntax ()) ("modules/compiler/sforms.scm" function compile/set! ()) ("modules/compiler/sforms.scm" function compile/quote ()) ("modules/compiler/sforms.scm" function compile-point-stack ()) ("modules/compiler/sforms.scm" function compile-point-file-and-line ()) ("modules/compiler/sforms.scm" function compile-FUNCTION ()) ("modules/compiler/sforms.scm" function compile/mquote ()) ("modules/compiler/sforms.scm" function compile/lambda ()) ("modules/compiler/sforms.scm" function compile/if ()) ("modules/compiler/sforms.scm" function compile/bdg ()) ("modules/compiler/sforms.scm" function make-special-forms ()) ("modules/compiler/sforms.scm" function core-compiler->proc ()) ("modules/compiler/sforms.scm" variable *special-form-compilers* ()) ("modules/compiler/sforms.scm" function add-special-form-compiler! ()) ("modules/compiler/sforms.scm" function special-form-compiler->proc ()) ("modules/compiler/sforms.scm" function compile-with-ad-hoc-sf ()) ("modules/compiler/envts.scm" method initialize ()) ("modules/compiler/envts.scm" function dynamic-enclosing-chain ()) ("modules/compiler/envts.scm" function lexical-enclosing-chain ()) ("modules/compiler/envts.scm" function make-top-level-contour ()) ("modules/compiler/envts.scm" function copy-top-level-contour ()) ("modules/compiler/envts.scm" function make-lexrec-envt ()) ("modules/compiler/envts.scm" function num-bindings ()) ("modules/compiler/envts.scm" function shallow-lookup ()) ("modules/compiler/envts.scm" method lookup ()) ("modules/compiler/envts.scm" method lookup ()) ("modules/compiler/envts.scm" method bind! ()) ("modules/compiler/envts.scm" method bind-name! ()) ("modules/compiler/envts.scm" function multi-bind! ()) ("modules/compiler/envts.scm" function multi-bind-assoc! ()) ("modules/compiler/envts.scm" function the-top-level ()) ("modules/compiler/envts.scm" method lookup ()) ("modules/compiler/envts.scm" function lookup-from-imported-module ()) ("modules/compiler/formals.scm" syntax process-formals$ ()) ("modules/compiler/formals.scm" function compute-min-args ()) ("modules/compiler/formals.scm" function compute-num-args ()) ("modules/compiler/formals.scm" function compute-has-rest ()) ("modules/compiler/formals.scm" function compute-specializers ()) ("modules/compiler/formals.scm" function specifier->lex-var ()) ("modules/compiler/formals.scm" function make-lex-vars ()) ("modules/compiler/errors.scm" class <compile-error> ()) ("modules/compiler/errors.scm" class <warning> ()) ("modules/compiler/errors.scm" class <syntax-error> ()) ("modules/compiler/errors.scm" class <semantic-error> ()) ("modules/compiler/errors.scm" function compile-error-class ()) ("modules/compiler/errors.scm" method display-object ()) ("modules/compiler/errors.scm" function error/syntax ()) ("modules/compiler/errors.scm" function error/syntax* ()) ("modules/compiler/errors.scm" function error/semantic ()) ("modules/compiler/errors.scm" function error/semantic* ()) ("modules/compiler/errors.scm" function error/internal ()) ("modules/compiler/errors.scm" function warning ()) ("modules/compiler/errors.scm" function current-source-point ()) ("modules/compiler/errors.scm" function current-location-table ()) ("modules/compiler/errors.scm" function current-location-lookup ()) ("modules/compiler/errors.scm" function append-source-property ()) ("modules/compiler/primtype.scm" function prim-type->class ()) ("modules/compiler/primtype.scm" function ct-unraw-type ()) ("modules/compiler/primtype.scm" function ct-unprim-type ()) ("modules/compiler/primtype.scm" function ct-type->prim-type-name ()) ("modules/compiler/primtype.scm" function native-class->prim-type-name ()) ("modules/compiler/primtype.scm" function target-class->prim-type-name ()) ("modules/compiler/coerce.scm" variable $raw-true ()) ("modules/compiler/coerce.scm" variable $raw-false ()) ("modules/compiler/coerce.scm" function obj-expr ()) ("modules/compiler/coerce.scm" function raw-bool-expr ()) ("modules/compiler/coerce.scm" function strip-coercions ()) ("modules/compiler/coerce.scm" function coerce-aml ()) ("modules/compiler/coerce.scm" function coerce-basic-aml ()) ("modules/compiler/coerce.scm" function coerce-aml-list ()) ("modules/compiler/macros.scm" syntax binding-isa-subst ()) ("modules/compiler/macros.scm" function match-context-lookup ()) ("modules/compiler/macros.scm" function match-context-cancel ()) ("modules/compiler/macros.scm" function match-context-dyn-envt ()) ("modules/compiler/macros.scm" function match-context-add-subst ()) ("modules/compiler/macros.scm" function match-type? ()) ("modules/compiler/macros.scm" function check-restricted-pattern ()) ("modules/compiler/macros.scm" function match ()) ("modules/compiler/macros.scm" function match-args ()) ("modules/compiler/macros.scm" function compile-syntax-form ()) ("modules/compiler/macros.scm" function compile-macro ()) ("modules/compiler/macros.scm" function find-match ()) ("modules/compiler/macros.scm" function find-setter-match ()) ("modules/compiler/typechek.scm" function multi-checked-coerce ()) ("modules/compiler/typechek.scm" function wrap-in-conversions ()) ("modules/compiler/typechek.scm" function coerced-expr ()) ("modules/compiler/typechek.scm" function type-checked-expr* ()) ("modules/compiler/typechek.scm" function checker-primop-for-type ()) ("modules/compiler/typechek.scm" function primtype->checker-primop ()) ("modules/compiler/typechek.scm" function class-recognizer ()) ("modules/compiler/typechek.scm" function ct-compatible-type? ()) ("modules/compiler/typechek.scm" function target-subclass? ()) ("modules/compiler/typechek.scm" function parse-type-expr ()) ("modules/compiler/aliases.scm" class <alias-contour> ()) ("modules/compiler/aliases.scm" method bindings ()) ("modules/compiler/aliases.scm" method name->bindings ()) ("modules/compiler/aliases.scm" method lexical-enclosing ()) ("modules/compiler/aliases.scm" method lookup ()) ("modules/compiler/aliases.scm" function find-subst-site ()) ("modules/compiler/aliases.scm" method lookup ()) ("modules/compiler/aliases.scm" function lookup-no-alias ()) ("modules/compiler/aliases.scm" function lookup-aliased ()) ("modules/compiler/aliases.scm" function make-aliased-vars ()) ("modules/compiler/aliases.scm" function compile/symbol ()) ("modules/compiler/aliases.scm" function make-lexical-envt ()) ("modules/compiler/aliases.scm" function tl-bind! ()) ("modules/compiler/quasiqu.scm" function compile/quasiquote ()) ("modules/compiler/quasiqu.scm" function qq* ()) ("modules/compiler/quasiqu.scm" function assign-qq-arg ()) ("modules/compiler/quasiqu.scm" function qq-main ()) ("modules/compiler/quasiqu.scm" function qq ()) ("modules/compiler/quasiqu.scm" function qq-pair ()) ("modules/compiler/quasiqu.scm" function qq-special ()) ("modules/compiler/quasiqu.scm" function qq-vector ()) ("modules/compiler/consts.scm" function compile-time-const? ()) ("modules/compiler/consts.scm" function compile-time-const-value ()) ("modules/compiler/consts.scm" function const-tlv? ()) ("modules/compiler/consts.scm" function class-tlv? ()) ("modules/compiler/consts.scm" function class-constant? ()) ("modules/compiler/consts.scm" function parse-const-expr ()) ("modules/compiler/consts.scm" function fold-const ()) ("modules/compiler/wellknwn.scm" function bind-to-code ()) ("modules/compiler/wellknwn.scm" function compile/well-known-function ()) ("modules/compiler/usagechk.scm" function usage-check ()) ("modules/compiler/kwdlist.scm" function compile-keyword-list ()) ("modules/compiler/kwdlist.scm" function for-each-keyword ()) ("modules/compiler/with.scm" class <with-envt> ()) ("modules/compiler/with.scm" method lookup ()) ("modules/compiler/with.scm" function compile/with-module ()) ("modules/compiler/bindchek.scm" function objs-only-envt ()) ("modules/compiler/bindchek.scm" function mfg-required-type-checks ()) ("modules/compiler/bindchek.scm" function gen-assert-type ()) ("modules/compiler/bindchek.scm" function mfg-multi-return ()) ("modules/compiler/bindchek.scm" function install-type-checks-in-body! ()) ("modules/compiler/bindchek.scm" function install-type-checks-in-inits! ()) ("modules/compiler/bindchek.scm" method initialize ()) ("modules/compiler/inline.scm" variable *do-inlining* ()) ("modules/compiler/inline.scm" function slot-sealed? ()) ("modules/compiler/inline.scm" function slot-was-inlined? ()) ("modules/compiler/inline.scm" function set-slot-was-inlined! ()) ("modules/compiler/inline.scm" function inline-setter ()) ("modules/compiler/inline.scm" function inline-getter ()) ("modules/compiler/inline.scm" function do-inlining ()) ("modules/compiler/inline.scm" function inlined-version ()) ("modules/compiler/srfi0.scm" variable *globally-implemented* ()) ("modules/compiler/srfi0.scm" function remove-globally-implemented! ()) ("modules/compiler/srfi0.scm" function add-globally-implemented! ()) ("modules/compiler/srfi0.scm" function in-implements-list? ()) ("modules/compiler/srfi0.scm" function choose-loaded-implementation ()) ("modules/compiler/srfi0.scm" variable choose-loadable-implementation ()) ("modules/compiler/srfi0.scm" function eval-implements ()) ("modules/compiler/srfi0.scm" function lexical-compare-list ()) ("modules/compiler/srfi0.scm" function eval-implements/feature ()) ("modules/compiler/srfi0.scm" function compile/if-implements ()) ("modules/compiler/srfi0.scm" function make-export-implementation-bdg ()) ("modules/compiler/srfi0.scm" function push-withs ()) ("modules/compiler/srfi0.scm" function compile/cond-expand ())))