(start (corelib high-scheme tables mathlib objsys low-scheme iolib *scheme* primops precore) (out-of-bounds-handler runtime-error-args formals-min-argc <formals-match-error> tlv-not-bound-handler scheme-error-handler *program* set-formals-min-argc! *num-gc-flips* <runtime-error> handle-user-intr place-name required-types backstop-handler-proc *backstop-handler-chain* greeting runtime-error-place *exceptions-abort-process* start-threads-hook *license* call-to-non-function-handler handle-gc-flip set-runtime-error-args! get-boot-args get-boot-image start set-formals-max-argc! actual-argc *before-main-call-hook* add-before-main-call-hook! call-thunks type-check-failed-handler machine-panic set-presentation! runtime-error-msg remove-before-main-call-hook! set-runtime-error-msg! *c-signal-handlers* set-actual-object! set-exceptions-abort-process! ignore-timer <simple-runtime-error> register-c-signal-handler! set-actual-argc! set-required-types! add-after-image-load-hook! die formals-max-argc os-glue-error-handler ignore-child-exited <type-match-error> *version* type-assert-failed-handler dump-dynamic-state actual-object set-start-threads-hook! wrong-num-args-handler exception-handler recursive-exception *after-image-load-hook* remove-after-image-load-hook! handle-finalization handle-c-signal *script* set-runtime-error-place!) (("modules/start/start.scm" variable *script* ()) ("modules/start/start.scm" syntax get-boot-args ()) ("modules/start/start.scm" syntax get-boot-image ()) ("modules/start/start.scm" function die ()) ("modules/start/start.scm" function start ()) ("modules/start/start.scm" function call-thunks ()) ("modules/start/start.scm" variable start-threads-hook ()) ("modules/start/start.scm" function set-start-threads-hook! ()) ("modules/start/present.scm" variable *program* ()) ("modules/start/present.scm" variable *version* ()) ("modules/start/present.scm" variable *license* ()) ("modules/start/present.scm" function set-presentation! ()) ("modules/start/present.scm" function greeting ()) ("modules/start/handlers.scm" function place-name ()) ("modules/start/handlers.scm" class <runtime-error> ()) ("modules/start/handlers.scm" class <simple-runtime-error> ()) ("modules/start/handlers.scm" class <formals-match-error> ()) ("modules/start/handlers.scm" class <type-match-error> ()) ("modules/start/handlers.scm" method display-object ()) ("modules/start/handlers.scm" method display-object ()) ("modules/start/handlers.scm" method display-object ()) ("modules/start/handlers.scm" method display-object ()) ("modules/start/handlers.scm" function scheme-error-handler ()) ("modules/start/handlers.scm" function tlv-not-bound-handler ()) ("modules/start/handlers.scm" function call-to-non-function-handler ()) ("modules/start/handlers.scm" function wrong-num-args-handler ()) ("modules/start/handlers.scm" function type-check-failed-handler ()) ("modules/start/handlers.scm" function out-of-bounds-handler ()) ("modules/start/handlers.scm" function os-glue-error-handler ()) ("modules/start/handlers.scm" function type-assert-failed-handler ()) ("modules/start/handlers.scm" variable *exceptions-abort-process* ()) ("modules/start/handlers.scm" function set-exceptions-abort-process! ()) ("modules/start/handlers.scm" function exception-handler ()) ("modules/start/handlers.scm" function dump-dynamic-state ()) ("modules/start/handlers.scm" function machine-panic ()) ("modules/start/handlers.scm" variable *num-gc-flips* ()) ("modules/start/handlers.scm" function handle-gc-flip ()) ("modules/start/handlers.scm" function handle-user-intr ()) ("modules/start/handlers.scm" function ignore-timer ()) ("modules/start/handlers.scm" function ignore-child-exited ()) ("modules/start/handlers.scm" function handle-finalization ()) ("modules/start/handlers.scm" variable *c-signal-handlers* ()) ("modules/start/handlers.scm" function register-c-signal-handler! ()) ("modules/start/handlers.scm" function handle-c-signal ()) ("modules/start/handlers.scm" function recursive-exception ()) ("modules/start/handlers.scm" function backstop-handler-proc ()) ("modules/start/handlers.scm" variable *backstop-handler-chain* ())))