(iolib (earley paths corelib mathlib objsys low-scheme tables *scheme* primops precore) (peek-char bad-follow std-format-gen-1 unicode-string-set! popen define-input-proc underlying-output-port <eof> unicodify scan-str-get-esc-number format/r read:parse-object init-sharp-scanners post-dot-number string-split-evenly with-output-to-string mark-overflow set-text! pp-aux print input-port-char-ready? bounded-string-output-port-write-char *read-port* format/b text read-string buffered-input-posn scan-past-whitespace display->bounded-string open-input-string read read-error-args format/~ unicode-string-ref fwrite/str valid-id-initial? list-max scan-token set-buffered-input-buffer! <string-input-port> .write-char flush-output-port $ascii-char-names scan-str-escape match-char-prefix do-align make-triv-token bounded-string-output-port-write-string std-format-gen-0 *input-port* star-flag format/p <buffered-input-port> provide-more-input scan-sharp-f write *global-formatters* buffered-input-buffer call-with-output-string set-filter-proc! $eof-object set-buffered-input-posn! open-output-append-file set-current-buffer! parse-format-string pop-format-args scan-special format-character .read-string *alternate-number-parsers* call-with-input-file list->symbol-token set-input-port-completions! with-objects-from-file $delimiter-switch grok-char-literal input-port-line-number define-with-implicit-output-port open-input-process/popen set-read-error-args! set-io-error-msg! post-dot-digits open-output-process interp-number eof-object? input-port-read-char make-output-filter define-reader-ctor set-partially-read! <io-port-is-closed-error> source-port *error-port* .newline set-line-number! signal-port-is-closed eof-object print-bvec-line scan-string .current-output-port more-input-ready? set-destination-port! *sharp-handlers* set-overflow-procedure! char-ready? .scan-token close-output-port set-current-buffer-index! $standard-output-port $standard-error-port current-error-port truncation-filter open-input-process format/c flush-stdio-out ferror *sharp-scanners* <io-error> input-port-peek-char $id-contd-switch alternate-number-parser negative-flag reader-macro-print not-delimiter? add-sharp-scanner! set-reading-port! *unique-object-names* add-unique-object! input-port-read-rest $id-initial-switch unicode-char->utf-string display-n-spaces at-flag ftell string-output-port-flush skip-extended-comment print-bvec reading-from-port <bounded-string-output-port> string-output-port-write-char *output-port* clearerr eval-hash-comma-datum input-port? <curly-braced> format/s format/d scan-char-const .current-error-port <io-scan-error> write-int <output-pipe-port> call-with-markup buffer-overflows set-underlying-output-port! input-port-scan-token write-markup line-number fflush read-line stderr valid-id-continued? with-input-from-port partially-read .char-ready? .read-line *open-input-process* scan-sharp-t ~ fputc *console-error-port* filter-proc print-length>= set-underlying-input-port! set-port-position! fcanget valid-num-continued? scan-comment call-with-output-file string-output-port-write-string *open-output-process* set-remaining-length! utf-encoding-to-unicode current-input-port sharp-flag file-stream newline with-bounded-string-port* fgets string-output-port-write-int scan-math-operator read:error fgetc set-input-port-prompt! pre-dot-leading-zero-flag write-char lexical-error write-a-vector format/x format-using .write set-process-io-proc! <partial-read> pclose format open-input-file scan-sharp-comma pre-dot-number .peek-char object->bounded-string print.print* with-input-from-file overflow-procedure grok-char-literal* list-sum set-input-port-line-number! skip-whitespace make-fixed-length-input-port set-source-port! standard-formatting-options string->printable sharp-num-handler add-alternate-number-parser! $special-chars close-input-port make-formatter *read-time-constructors* open-output-bounded-string underlying-input-port .display read:internal-error format/t no-truncate-filter fgetln open-output-process/popen set-input-port-name! init-scanners format-gen/d print-gvec $post-blk increment-line format/C unicode-string-length <output-port> string->unique-object braced-modifier with-output-to-file <std-output-port> scan-string* with-input-from-string *unicode-locale* stdout write-string stdin fread-fill format/o io-error-args set-reading-from-port! *console-input-port* format/_ $standard-input-port format/% an-open-stream $num-switch scan-dot format/a fallback-read-rest set-read-error-message! $default-info <read-error> feof string->c-text read:parse-object* bounded-string-port-overflowed .read-char current-output-port stdin-peek open-output-string delimiter? fclose <std-input-port> port->string *console-output-port* read:parse-list output-port? read-error-message format/j io-error-msg <io-active-error> format-gen/f <fixed-length-input-port> port-position collect scanner-dispatch fpeekc output-port-write-char set-io-error-args! input-port-name with-output-to-port bounded-string-output-port-flush string-ci-assoc stdio-extension bstr-negarg read:parse-vector set-on-port! <input-port> set-file-stream! get-output-string numeric-lexeme <io-port> display *scanners* template-place non-list-print-length>= set-target-length! .read print.print1 current-buffer-index .current-input-port input-port-read-len make-token remaining-length input-port-read-max do-format <string-output-port> scan-char-literal print-summary reading-port <io-open-error> scan-ident destination-port fallback-read-len on-port <input-pipe-port> special-sharp <io-parse-error> add-sharp-handler! target-length fseek open-output-file current-buffer set-buffer-overflows! bounded-string-output-port-write-int scan-braced-text pp fopen input-port-read read-char file->string with-objects-from-port sharp-uniqobj-handler <output-filter> input-port-read-line) (("modules/iolib/classes.scm" class <io-port> ()) ("modules/iolib/classes.scm" method name ()) ("modules/iolib/classes.scm" method write-object ()) ("modules/iolib/classes.scm" class <io-error> ()) ("modules/iolib/classes.scm" class <io-open-error> ()) ("modules/iolib/classes.scm" class <io-active-error> ()) ("modules/iolib/classes.scm" class <io-port-is-closed-error> ()) ("modules/iolib/classes.scm" class <io-parse-error> ()) ("modules/iolib/classes.scm" class <io-scan-error> ()) ("modules/iolib/classes.scm" class <input-port> ()) ("modules/iolib/classes.scm" function input-port? ()) ("modules/iolib/classes.scm" class <std-input-port> ()) ("modules/iolib/classes.scm" class <output-port> ()) ("modules/iolib/classes.scm" function output-port? ()) ("modules/iolib/classes.scm" class <std-output-port> ()) ("modules/iolib/classes.scm" function signal-port-is-closed ()) ("modules/iolib/stdio.scm" syntax stdio-extension ()) ("modules/iolib/current.scm" variable $standard-input-port ()) ("modules/iolib/current.scm" variable $standard-output-port ()) ("modules/iolib/current.scm" variable $standard-error-port ()) ("modules/iolib/input.scm" syntax increment-line ()) ("modules/iolib/input.scm" class <eof> ()) ("modules/iolib/input.scm" variable $eof-object ()) ("modules/iolib/input.scm" function eof-object? ()) ("modules/iolib/input.scm" function eof-object ()) ("modules/iolib/input.scm" method input-port-read-line ()) ("modules/iolib/input.scm" method input-port-char-ready? ()) ("modules/iolib/input.scm" variable .read-char ()) ("modules/iolib/input.scm" variable .char-ready? ()) ("modules/iolib/input.scm" variable .peek-char ()) ("modules/iolib/input.scm" variable .scan-token ()) ("modules/iolib/input.scm" variable .read-line ()) ("modules/iolib/input.scm" variable .read ()) ("modules/iolib/input.scm" function skip-whitespace ()) ("modules/iolib/input.scm" method parse-using-grammar ()) ("modules/iolib/input.scm" method parse-using-grammar ()) ("modules/iolib/output.scm" method close-output-port ()) ("modules/iolib/output.scm" method flush-output-port ()) ("modules/iolib/output.scm" method call-with-markup ()) ("modules/iolib/output.scm" method write-markup ()) ("modules/iolib/output.scm" method write-string ()) ("modules/iolib/output.scm" method write-int ()) ("modules/iolib/output.scm" variable .write-char ()) ("modules/iolib/output.scm" variable .newline ()) ("modules/iolib/output.scm" variable .write ()) ("modules/iolib/output.scm" variable .display ()) ("modules/iolib/stdout.scm" class <output-pipe-port> ()) ("modules/iolib/stdout.scm" function open-output-file ()) ("modules/iolib/stdout.scm" function open-output-append-file ()) ("modules/iolib/stdout.scm" function open-output-process/popen ()) ("modules/iolib/stdout.scm" syntax an-open-stream ()) ("modules/iolib/stdout.scm" method output-port-write-char ()) ("modules/iolib/stdout.scm" method write-string ()) ("modules/iolib/stdout.scm" function flush-stdio-out ()) ("modules/iolib/stdout.scm" method close-output-port ()) ("modules/iolib/stdout.scm" method close-output-port ()) ("modules/iolib/stdout.scm" method flush-output-port ()) ("modules/iolib/stdout.scm" method port-position ()) ("modules/iolib/stdout.scm" method set-port-position! ()) ("modules/iolib/stdin.scm" method input-port-char-ready? ()) ("modules/iolib/stdin.scm" class <input-pipe-port> ()) ("modules/iolib/stdin.scm" function open-input-file ()) ("modules/iolib/stdin.scm" function open-input-process/popen ()) ("modules/iolib/stdin.scm" method input-port-read-char ()) ("modules/iolib/stdin.scm" syntax stdin-peek ()) ("modules/iolib/stdin.scm" method input-port-peek-char ()) ("modules/iolib/stdin.scm" method collect ()) ("modules/iolib/stdin.scm" method input-port-read-line ()) ("modules/iolib/stdin.scm" method close-input-port ()) ("modules/iolib/stdin.scm" method close-input-port ()) ("modules/iolib/stdin.scm" function file->string ()) ("modules/iolib/stdin.scm" method port-position ()) ("modules/iolib/stdin.scm" method set-port-position! ()) ("modules/iolib/strout.scm" class <string-output-port> ()) ("modules/iolib/strout.scm" glue string-output-port-flush ((type function))) ("modules/iolib/strout.scm" method get-output-string ()) ("modules/iolib/strout.scm" method close-output-port ()) ("modules/iolib/strout.scm" function open-output-string ()) ("modules/iolib/strout.scm" glue string-output-port-write-char ((type function))) ("modules/iolib/strout.scm" method output-port-write-char ()) ("modules/iolib/strout.scm" glue string-output-port-write-string ((type function))) ("modules/iolib/strout.scm" method write-string ()) ("modules/iolib/strout.scm" glue string-output-port-write-int ((type function))) ("modules/iolib/strout.scm" method write-int ()) ("modules/iolib/strout.scm" method port-position ()) ("modules/iolib/bstrout.scm" class <bounded-string-output-port> ()) ("modules/iolib/bstrout.scm" function bounded-string-port-overflowed ()) ("modules/iolib/bstrout.scm" glue bounded-string-output-port-flush ((type function))) ("modules/iolib/bstrout.scm" method get-output-string ()) ("modules/iolib/bstrout.scm" method close-output-port ()) ("modules/iolib/bstrout.scm" function open-output-bounded-string ()) ("modules/iolib/bstrout.scm" glue bounded-string-output-port-write-char ((type function))) ("modules/iolib/bstrout.scm" method output-port-write-char ()) ("modules/iolib/bstrout.scm" glue bounded-string-output-port-write-string ((type function))) ("modules/iolib/bstrout.scm" method write-string ()) ("modules/iolib/bstrout.scm" glue bounded-string-output-port-write-int ((type function))) ("modules/iolib/bstrout.scm" method write-int ()) ("modules/iolib/bstrout.scm" function with-bounded-string-port* ()) ("modules/iolib/bstrout.scm" function bstr-negarg ()) ("modules/iolib/bstrout.scm" function object->bounded-string ()) ("modules/iolib/bstrout.scm" function display->bounded-string ()) ("modules/iolib/curlybrc.scm" class <curly-braced> ()) ("modules/iolib/curlybrc.scm" method write-object ()) ("modules/iolib/curlybrc.scm" method display-object ()) ("modules/iolib/curlybrc.scm" function string->c-text ()) ("modules/iolib/scan.scm" function scanner-dispatch ()) ("modules/iolib/scan.scm" method input-port-scan-token ()) ("modules/iolib/scanchar.scm" variable $special-chars ()) ("modules/iolib/scanchar.scm" function grok-char-literal* ()) ("modules/iolib/scanchar.scm" syntax match-char-prefix ()) ("modules/iolib/scanchar.scm" function grok-char-literal ()) ("modules/iolib/scanchar.scm" function scan-char-literal ()) ("modules/iolib/read.scm" class <read-error> ()) ("modules/iolib/read.scm" method display-object ()) ("modules/iolib/read.scm" function read:internal-error ()) ("modules/iolib/read.scm" function read:error ()) ("modules/iolib/read.scm" function read:parse-vector ()) ("modules/iolib/read.scm" function read:parse-list ()) ("modules/iolib/read.scm" function read:parse-object* ()) ("modules/iolib/read.scm" function read:parse-object ()) ("modules/iolib/read.scm" method input-port-read ()) ("modules/iolib/format.scm" glue parse-format-string ((type function))) ("modules/iolib/format.scm" syntax format-character ()) ("modules/iolib/format.scm" syntax sharp-flag ()) ("modules/iolib/format.scm" syntax star-flag ()) ("modules/iolib/format.scm" syntax at-flag ()) ("modules/iolib/format.scm" syntax negative-flag ()) ("modules/iolib/format.scm" syntax pre-dot-leading-zero-flag ()) ("modules/iolib/format.scm" syntax pre-dot-number ()) ("modules/iolib/format.scm" syntax post-dot-digits ()) ("modules/iolib/format.scm" syntax post-dot-number ()) ("modules/iolib/format.scm" syntax braced-modifier ()) ("modules/iolib/format.scm" variable $default-info ()) ("modules/iolib/format.scm" function format/a ()) ("modules/iolib/format.scm" function format/s ()) ("modules/iolib/format.scm" function format/p ()) ("modules/iolib/format.scm" function format/d ()) ("modules/iolib/format.scm" function format/x ()) ("modules/iolib/format.scm" function format/r ()) ("modules/iolib/format.scm" function format/b ()) ("modules/iolib/format.scm" function format/o ()) ("modules/iolib/format.scm" function format/c ()) ("modules/iolib/format.scm" function format/_ ()) ("modules/iolib/format.scm" function format/% ()) ("modules/iolib/format.scm" function format/~ ()) ("modules/iolib/format.scm" function format/t ()) ("modules/iolib/format.scm" function format/C ()) ("modules/iolib/format.scm" function format/j ()) ("modules/iolib/format.scm" function string-split-evenly ()) ("modules/iolib/format.scm" function format-gen/d ()) ("modules/iolib/format.scm" function format-gen/f ()) ("modules/iolib/format.scm" function std-format-gen-1 ()) ("modules/iolib/format.scm" function std-format-gen-0 ()) ("modules/iolib/format.scm" variable *global-formatters* ()) ("modules/iolib/format.scm" function pop-format-args ()) ("modules/iolib/format.scm" function do-format ()) ("modules/iolib/format.scm" function standard-formatting-options ()) ("modules/iolib/format.scm" function do-align ()) ("modules/iolib/format.scm" function mark-overflow ()) ("modules/iolib/format.scm" function no-truncate-filter ()) ("modules/iolib/format.scm" function truncation-filter ()) ("modules/iolib/format.scm" function format ()) ("modules/iolib/format.scm" function format-using ()) ("modules/iolib/format.scm" function make-formatter ()) ("modules/iolib/writers.scm" function reader-macro-print ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method display-object ()) ("modules/iolib/writers.scm" glue string->printable ((type function))) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method display-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" function write-a-vector ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method display-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" variable $ascii-char-names ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method display-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" function template-place ()) ("modules/iolib/writers.scm" method name ()) ("modules/iolib/writers.scm" method name ()) ("modules/iolib/writers.scm" method name ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method display-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method display-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method display-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method display-object ()) ("modules/iolib/writers.scm" method display-object ()) ("modules/iolib/writers.scm" method write-object ()) ("modules/iolib/writers.scm" method display-object ()) ("modules/iolib/strin.scm" class <buffered-input-port> ()) ("modules/iolib/strin.scm" class <string-input-port> ()) ("modules/iolib/strin.scm" function open-input-string ()) ("modules/iolib/strin.scm" method provide-more-input ()) ("modules/iolib/strin.scm" method more-input-ready? ()) ("modules/iolib/strin.scm" method input-port-char-ready? ()) ("modules/iolib/strin.scm" method input-port-read-char ()) ("modules/iolib/strin.scm" method input-port-peek-char ()) ("modules/iolib/strin.scm" method input-port-read-line ()) ("modules/iolib/strin.scm" method collect ()) ("modules/iolib/strin.scm" method close-input-port ()) ("modules/iolib/strin.scm" method port-position ()) ("modules/iolib/strin.scm" method set-port-position! ()) ("modules/iolib/print.scm" function print.print1 ()) ("modules/iolib/print.scm" function print.print* ()) ("modules/iolib/print.scm" method print ()) ("modules/iolib/print.scm" method print ()) ("modules/iolib/print.scm" method print ()) ("modules/iolib/print.scm" function print-summary ()) ("modules/iolib/print.scm" function print-gvec ()) ("modules/iolib/print.scm" variable $post-blk ()) ("modules/iolib/print.scm" function print-bvec-line ()) ("modules/iolib/print.scm" function print-bvec ()) ("modules/iolib/print.scm" method print ()) ("modules/iolib/print.scm" method print ()) ("modules/iolib/conven.scm" function with-output-to-port ()) ("modules/iolib/conven.scm" function with-input-from-port ()) ("modules/iolib/conven.scm" function call-with-output-file ()) ("modules/iolib/conven.scm" function with-output-to-file ()) ("modules/iolib/conven.scm" function call-with-input-file ()) ("modules/iolib/conven.scm" function with-input-from-file ()) ("modules/iolib/conven.scm" function with-input-from-string ()) ("modules/iolib/conven.scm" function call-with-output-string ()) ("modules/iolib/conven.scm" function with-output-to-string ()) ("modules/iolib/conven.scm" function with-objects-from-port ()) ("modules/iolib/conven.scm" function with-objects-from-file ()) ("modules/iolib/filter.scm" class <output-filter> ()) ("modules/iolib/filter.scm" method output-port-write-char ()) ("modules/iolib/filter.scm" method write-string ()) ("modules/iolib/filter.scm" function make-output-filter ()) ("modules/iolib/unicode.scm" function unicodify ()) ("modules/iolib/unicode.scm" function utf-encoding-to-unicode ()) ("modules/iolib/unicode.scm" variable *unicode-locale* ()) ("modules/iolib/unicode.scm" method unicode-char->utf-string ()) ("modules/iolib/unicode.scm" method unicode-char->utf-string ()) ("modules/iolib/unicode.scm" method write-object ()) ("modules/iolib/unicode.scm" function unicode-string-length ()) ("modules/iolib/unicode.scm" function unicode-string-ref ()) ("modules/iolib/unicode.scm" function unicode-string-set! ()) ("modules/iolib/unicode.scm" method display-object ()) ("modules/iolib/unicode.scm" method write-object ()) ("modules/iolib/uniqobj.scm" variable *unique-object-names* ()) ("modules/iolib/uniqobj.scm" method write-object ()) ("modules/iolib/uniqobj.scm" method to-string ()) ("modules/iolib/uniqobj.scm" function string->unique-object ()) ("modules/iolib/uniqobj.scm" function add-unique-object! ()) ("modules/iolib/disperrs.scm" method display-object ()) ("modules/iolib/pprint.scm" function list-max ()) ("modules/iolib/pprint.scm" function list-sum ()) ("modules/iolib/pprint.scm" function display-n-spaces ()) ("modules/iolib/pprint.scm" function non-list-print-length>= ()) ("modules/iolib/pprint.scm" function print-length>= ()) ("modules/iolib/pprint.scm" function pp-aux ()) ("modules/iolib/pprint.scm" function pp ()) ("modules/iolib/process.scm" variable *open-input-process* ()) ("modules/iolib/process.scm" variable *open-output-process* ()) ("modules/iolib/process.scm" function set-process-io-proc! ()) ("modules/iolib/process.scm" function open-input-process ()) ("modules/iolib/process.scm" function open-output-process ()) ("modules/iolib/readstr.scm" class <partial-read> ()) ("modules/iolib/readstr.scm" method display-object ()) ("modules/iolib/readstr.scm" function fallback-read-len ()) ("modules/iolib/readstr.scm" function fallback-read-rest ()) ("modules/iolib/readstr.scm" method input-port-read-len ()) ("modules/iolib/readstr.scm" method input-port-read-rest ()) ("modules/iolib/readstr.scm" method input-port-read-rest ()) ("modules/iolib/readstr.scm" method input-port-read-max ()) ("modules/iolib/readstr.scm" method input-port-read-len ()) ("modules/iolib/readstr.scm" method input-port-read-rest ()) ("modules/iolib/readstr.scm" method input-port-read-len ()) ("modules/iolib/readstr.scm" method input-port-read-rest ()) ("modules/iolib/readstr.scm" method input-port-read-len ()) ("modules/iolib/readstr.scm" method input-port-read-len ()) ("modules/iolib/readstr.scm" method input-port-read-rest ()) ("modules/iolib/readstr.scm" variable .read-string ()) ("modules/iolib/readstr.scm" function port->string ()) ("modules/iolib/readstr.scm" class <fixed-length-input-port> ()) ("modules/iolib/readstr.scm" function make-fixed-length-input-port ()) ("modules/iolib/readstr.scm" method input-port-read-max ()) ("modules/iolib/readstr.scm" method provide-more-input ()) ("modules/iolib/readstr.scm" method more-input-ready? ()) ("modules/iolib/readapp.scm" variable *read-time-constructors* ()) ("modules/iolib/readapp.scm" function eval-hash-comma-datum ()) ("modules/iolib/readapp.scm" function define-reader-ctor ())))