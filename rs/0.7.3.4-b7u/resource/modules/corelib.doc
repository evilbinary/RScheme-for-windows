(corelib (precore *scheme* primops) (set-enclosing! <mp-rational> wind-fluid-tlv-contour gc-cycle-id string<? class-precedence-list <no-properties> gc-now bignum->string continue-intr-template winding-protected symbol->hash set-car! keyword? cond substring setup-c-signal-handler! <local-rewriter> set-spare-0! pair? winder *interrupt-handlers* find-code-ptr-in-part set-gf-cache-2-v! set-gf-cache-3-v! <real> error set-dirty?! raw-bignum->double-float make-empty-thread-vars handler-case set-allocation-area-reserved! return-from-call-scheme <sequence> set-table! result-type set-vm-thread-state-reg! on-exit sprintf-fixnum string=? relocate-objects string-fill! find-common-ancestor set-write-prot! set-gf-cache-0-k! rewriter-lex-envt limit-check set-argument-count-error-max-args! vector->values string->long-int vector? set-rest-type! <dequeue> set-c-module-descr-loaded-from! do-rewind dl-open size set-setter-forms! set-all-slots! properties standalone-template <pair> os-type call-with-current-continuation name set-state! <winding-contour> <primop> *capture-stack-on-conditions* rewriter-args *verbose* string-append string->byte-vector string->float boolean? class? <fixnum> direct-slots <partial-continuation> fluid-ref $thread-var-end string-ci<? os-getwd gf-cache-V-v set-result-type! set-primop-has-side-effect?! lexical-enclosing <top-level-contour> set-bci-trace-flag! immob->hash generic-function-name direct-thread-var-ref <one-shot-recontinued> splitter-procedure string->hash allocation-area-reserved symbol->keyword all-pointers-to trim-whitespace flush-and-call set-forms! set-gf-cache-2-k! table set-linkage-info! <<standard-class>> area-clone dynamic-wind one-shot-continuer define-delegation <substitution> set-name->bindings! display-object signal-no-such-key make-transient-allocation-area dl-error-message area-make-gvec* string-split/including <spare-2> set-collection! long-int->string find-part-in-linked-module set-translations! <spare-3> object-class set-vm-literals-reg! *args* or init-keyword <macro-form> vector-ref <type-check-failed> set-full-procedure-bdg! <binding> unwinder set-flush-and-call-proc! condition-class flush-link-data set-gf-cache-1-v! rewriter-body <<class>> apply* handler-proc area-make-gvec fixnum->string <os-error> corresponding-primtype null? *signal-handler* write-object write-prot make-resumer cdr <quantity> argument-count-error-min-args envt heap-type set-bindings! dirty? arg-types <boolean> subclass? set-gf-cache-0-v! gf-cache-V-k front message set-dynamic-enclosing! image-mode <double-float> add-thread-var! mk-handler-context string-ci->hash set-message! symbol->flag <no-last-element> gf-cache-2-k backing all-instances symbol-append set-image-mode! set-function-place-code! set-arg-types! values <simple-warning> set-element! set-function-specializers! code-pointer live-object-stats vector-set! set-vm-continuation-reg! continuation rest-type define-inline error-protocol-failure string-is signal-number->name finalize set-ftlc-saved-values! make-gvec abort *at-exit-thunks* raw-rational->double-float ignore-c-signal! set-corresponding-primtype! function-place-code set-allocation-area-entry! find-linked-module imag-part all-slots make-gvec* fluid-let *thread-var-init-values* string-ci>=? <template> set-rewriter-dyn-envt! dynamic-enclosing <abstract-string> gc-work getenv unwind <float> set-index! backstop <argument-count-error> <substring> lazy-flush-trampoline <improper-list> register-for-finalization string->bignum dl-done argument-count-error-max-args string-ci=? range-error set-else-bdg! <byte-vector> thread-let set__format set-continuation! dl-resolve indirect-thread-var-set! gf-cache-3-k element *thread-var-prototype* image-read-header dl-call proc->low-level-contn <mp-data> set-rewriter-lex-envt! <getter> <method> __format <allocation-area> <rewriter> signal-improper-list image-write-header symbol? instance-size set-class-precedence-list! define-safe-glue full-values type-error <setter> <serious-condition> args <single-dispatch-gf> set-key! vm-continuation-reg update-thread-state! <integer> back <symbol> close-over-dynamic-state dl-c-unit <place> set-class-name! make-rectangular get-c-function-descr set-type-restriction! set-name! set-function-descr! expr <object> set-unwinder! ftlc-saved-values set-gf-cache-3-k! <unique-obj> cons make-string string-search *rscheme-version-list* set-args! owner rewind string<=? raw-longint->double-float vm-literals-reg gf-cache-overflow ftlc-bindings <closure> arg-type-error word-size-bits string-ci<=? sprintf-float unwind-protect* set-gf-cache-V-k! enclosing double-float->string set-direct-slots! set-code-pointer! class-category *default-allocation-area* set-verbose! string? string-set! make-polar key setter-forms <no-such-key> set-error-protocol-failure-handler! sa/as-strings initialization-mode gf-cache-0-v translations function-descr class-hash vm-envt-reg get-c-part-descr <condition> set-template! allocation-area-op allocation-area-entry low-level-call/cc set-winder! set-value! forms class-name <function> set-improper-part! dynamic-call-thunk handler-bind call-with-current-continuation/one-shot set-initialization-mode! case <function-place> <bvec> string-split save-image gf-cache-1-k string-join gf-cache-2-v gf-cache-3-v generic-function-methods <octet-string> get-c-units define-fluid flag->symbol process-exit* sync-method set-instance-size! set-back! <spare-1> <byte-coded> set-cdr! set-gf-cache-overflow! set-generic-function-name! linkage-info <macro> gensym set-rewriter-args! set-ftlc-inside-values! name->bindings do <handler-context> c-module-root-set! numerator-raw <complex> string-ref <list> set-thread-var-initial-state! set-app-args! get-compile-options bvec-append template spare-0 set-ftlc-bindings! improper-part not bvec-append3 fluid-letter <rect-complex> <generic-function> os-signal-name-vector values->list init-value slot-descriptor set-condition-class! load-image set-direct-thread-init! environment <bignum> indirect-thread-var-apply os-setwd! machine-bits->string state define-macro and <binding-envt> define-thread-var %make string-length set-gf-cache-1-k! set-front! <fluid-tl-contour> eq? bvec-append2 keyword->symbol set-object! <top-level-var> vm-thread-state-reg string>? set-backing! set-superclasses! set-envt! <number> real-part set-setter! <error> type-restriction set-rewriter-body! index transient->hash denominator-raw setter <scope-record> signal identity set-argument-count-error-min-args! string->fixnum procedure? rewriter-dyn-envt primop-has-side-effect? cons* flag? list->values set-owner! else-bdg apply default-signal-handler object string->list string-ci>? symbol->string <argument-type-error> set-sync-method! <unicode-string> <winding-protect> unwind-protect apply-before-continuing string register-interrupt-handler! <ascii-char> set-apply-trace-flag! process-exit <unicode-char> <argument-error> gf-cache-1-v gf-cache-0-k <rational> unwind-fluid-tlv-contour process-abort set-winding-protected! bvec->string set-gf-cache-V-v! miss-count set-expr! let* set-vm-envt-reg! instance? list->string set-heap-type! full-procedure-bdg indirect-thread-var-ref collection continuer set-miss-count! superclasses set-getter! getter <vector> apply-template nlambda ftlc-inside-values string->rational body <long-int> dl-error bindings function-specializers <simple-error> <gvec> <collection> funcall vm-dynamic-state-reg string>=? <dynamic-link-error> set-init-value! bvec-append* *direct-names* car set-handler-proc! restore-then-call to-string value set-lexical-enclosing! initialize *handler-chain* set-environment! set-body! <slot-descriptor> <condition-stack> recontinue-error do-unwind get-c-module-descr c-module-root-ref set-properties! hash-code <slot-method> <char> string->symbol dl-install <string> set-init-keyword! set-generic-function-methods! <lexical-contour> <empty-list> thread-var-initial-state arg-count-error string-copy integer->hash fluid-set! set-vm-dynamic-state-reg! assert continuation->apply-before-continuing enable-subprocess-capture) (("modules/corelib/apply.scm" glue apply ((type function))) ("modules/corelib/apply.scm" glue funcall ((type function))) ("modules/corelib/apply.scm" glue apply-template ((type function))) ("modules/corelib/apply.scm" glue standalone-template ((type function))) ("modules/corelib/apply.scm" variable flush-and-call ()) ("modules/corelib/apply.scm" function set-flush-and-call-proc! ()) ("modules/corelib/apply.scm" glue lazy-flush-trampoline ((type function))) ("modules/corelib/apply.scm" glue apply* ((type function))) ("modules/corelib/apply.scm" glue list->values ((type function))) ("modules/corelib/apply.scm" function full-values ()) ("modules/corelib/apply.scm" syntax values ()) ("modules/corelib/apply.scm" glue backstop ((type function))) ("modules/corelib/apply.scm" syntax values->list ()) ("modules/corelib/apply.scm" function identity ()) ("modules/corelib/fluid.scm" syntax fluid-ref ()) ("modules/corelib/fluid.scm" function fluid-letter ()) ("modules/corelib/threadv.scm" syntax update-thread-state! ()) ("modules/corelib/threadv.scm" function make-empty-thread-vars ()) ("modules/corelib/threadv.scm" variable *thread-var-prototype* ()) ("modules/corelib/threadv.scm" variable *direct-names* ()) ("modules/corelib/threadv.scm" variable *thread-var-init-values* ()) ("modules/corelib/threadv.scm" function thread-var-initial-state ()) ("modules/corelib/threadv.scm" function set-thread-var-initial-state! ()) ("modules/corelib/threadv.scm" function add-thread-var! ()) ("modules/corelib/threadv.scm" function set-direct-thread-init! ()) ("modules/corelib/threadv.scm" syntax direct-thread-var-ref ()) ("modules/corelib/threadv.scm" syntax indirect-thread-var-apply ()) ("modules/corelib/threadv.scm" function indirect-thread-var-ref ()) ("modules/corelib/threadv.scm" function indirect-thread-var-set! ()) ("modules/corelib/errors.scm" method display-object ()) ("modules/corelib/errors.scm" class <condition-stack> ()) ("modules/corelib/errors.scm" variable *capture-stack-on-conditions* ()) ("modules/corelib/errors.scm" method initialize ()) ("modules/corelib/errors.scm" method display-object ()) ("modules/corelib/errors.scm" method display-object ()) ("modules/corelib/errors.scm" method display-object ()) ("modules/corelib/errors.scm" class <argument-count-error> ()) ("modules/corelib/errors.scm" function arg-type-error ()) ("modules/corelib/errors.scm" function arg-count-error ()) ("modules/corelib/errors.scm" class <handler-context> ()) ("modules/corelib/errors.scm" syntax handler-bind ()) ("modules/corelib/errors.scm" syntax mk-handler-context ()) ("modules/corelib/errors.scm" syntax handler-case ()) ("modules/corelib/errors.scm" function default-signal-handler ()) ("modules/corelib/errors.scm" function signal ()) ("modules/corelib/errors.scm" function error ()) ("modules/corelib/errors.scm" variable error-protocol-failure ()) ("modules/corelib/errors.scm" function set-error-protocol-failure-handler! ()) ("modules/corelib/errors.scm" function type-error ()) ("modules/corelib/errors.scm" function range-error ()) ("modules/corelib/errors.scm" function limit-check ()) ("modules/corelib/errors.scm" variable __format ()) ("modules/corelib/errors.scm" function set__format ()) ("modules/corelib/errors.scm" function abort ()) ("modules/corelib/errors.scm" syntax assert ()) ("modules/corelib/errors.scm" class <no-such-key> ()) ("modules/corelib/errors.scm" method display-object ()) ("modules/corelib/errors.scm" function signal-no-such-key ()) ("modules/corelib/errors.scm" class <no-last-element> ()) ("modules/corelib/errors.scm" method display-object ()) ("modules/corelib/errors.scm" class <improper-list> ()) ("modules/corelib/errors.scm" method display-object ()) ("modules/corelib/errors.scm" function signal-improper-list ()) ("modules/corelib/errors.scm" class <no-properties> ()) ("modules/corelib/errors.scm" method display-object ()) ("modules/corelib/errors.scm" method properties ()) ("modules/corelib/errors.scm" method set-properties! ()) ("modules/corelib/alloc.scm" class <allocation-area> ()) ("modules/corelib/alloc.scm" glue make-transient-allocation-area ((type function))) ("modules/corelib/alloc.scm" function allocation-area-entry ()) ("modules/corelib/alloc.scm" function set-allocation-area-entry! ()) ("modules/corelib/alloc.scm" function allocation-area-reserved ()) ("modules/corelib/alloc.scm" function set-allocation-area-reserved! ()) ("modules/corelib/alloc.scm" glue gc-cycle-id ((type function))) ("modules/corelib/alloc.scm" glue gc-now ((type function))) ("modules/corelib/alloc.scm" glue live-object-stats ((type function))) ("modules/corelib/alloc.scm" glue all-instances ((type function))) ("modules/corelib/alloc.scm" glue all-pointers-to ((type function))) ("modules/corelib/alloc.scm" glue relocate-objects ((type function))) ("modules/corelib/process.scm" variable *verbose* ()) ("modules/corelib/process.scm" variable *rscheme-version-list* ()) ("modules/corelib/process.scm" function set-verbose! ()) ("modules/corelib/process.scm" variable *args* ()) ("modules/corelib/process.scm" function set-app-args! ()) ("modules/corelib/process.scm" glue process-abort ((type function))) ("modules/corelib/process.scm" variable *at-exit-thunks* ()) ("modules/corelib/process.scm" function on-exit ()) ("modules/corelib/process.scm" function process-exit ()) ("modules/corelib/process.scm" glue process-exit* ((type function))) ("modules/corelib/process.scm" glue os-type ((type function))) ("modules/corelib/process.scm" glue word-size-bits ((type function))) ("modules/corelib/process.scm" glue os-getwd ((type function))) ("modules/corelib/process.scm" glue get-compile-options ((type function))) ("modules/corelib/process.scm" glue set-bci-trace-flag! ((type function))) ("modules/corelib/process.scm" glue set-apply-trace-flag! ((type function))) ("modules/corelib/dynstate.scm" method rewind ()) ("modules/corelib/dynstate.scm" method unwind ()) ("modules/corelib/dynstate.scm" class <winding-protect> ()) ("modules/corelib/dynstate.scm" method rewind ()) ("modules/corelib/dynstate.scm" method unwind ()) ("modules/corelib/dynstate.scm" syntax unwind-protect* ()) ("modules/corelib/dynstate.scm" syntax unwind-protect ()) ("modules/corelib/dynstate.scm" function dynamic-wind ()) ("modules/corelib/dynstate.scm" function continuation->apply-before-continuing ()) ("modules/corelib/dynstate.scm" function apply-before-continuing ()) ("modules/corelib/dynstate.scm" glue continuer ((type function))) ("modules/corelib/dynstate.scm" class <one-shot-recontinued> ()) ("modules/corelib/dynstate.scm" method display-object ()) ("modules/corelib/dynstate.scm" function recontinue-error ()) ("modules/corelib/dynstate.scm" glue one-shot-continuer ((type function))) ("modules/corelib/dynstate.scm" glue restore-then-call ((type function))) ("modules/corelib/dynstate.scm" glue proc->low-level-contn ((type function))) ("modules/corelib/dynstate.scm" glue low-level-call/cc ((type function))) ("modules/corelib/dynstate.scm" glue dynamic-call-thunk ((type function))) ("modules/corelib/dynstate.scm" glue find-common-ancestor ((type function))) ("modules/corelib/dynstate.scm" glue wind-fluid-tlv-contour ((type function))) ("modules/corelib/dynstate.scm" glue unwind-fluid-tlv-contour ((type function))) ("modules/corelib/dynstate.scm" glue do-unwind ((type function))) ("modules/corelib/dynstate.scm" glue do-rewind ((type function))) ("modules/corelib/string.scm" method string-length ()) ("modules/corelib/string.scm" glue make-string ((type function))) ("modules/corelib/string.scm" glue substring ((type function))) ("modules/corelib/string.scm" glue string-search ((type function))) ("modules/corelib/string.scm" method splitter-procedure ()) ("modules/corelib/string.scm" method splitter-procedure ()) ("modules/corelib/string.scm" method splitter-procedure ()) ("modules/corelib/string.scm" function string-split ()) ("modules/corelib/string.scm" function string-split/including ()) ("modules/corelib/string.scm" glue string ((type function))) ("modules/corelib/string.scm" glue list->string ((type function))) ("modules/corelib/string.scm" syntax string-is ()) ("modules/corelib/string.scm" function string<? ()) ("modules/corelib/string.scm" function string>? ()) ("modules/corelib/string.scm" function string<=? ()) ("modules/corelib/string.scm" function string>=? ()) ("modules/corelib/string.scm" function string-ci<? ()) ("modules/corelib/string.scm" function string-ci>? ()) ("modules/corelib/string.scm" function string-ci<=? ()) ("modules/corelib/string.scm" function string-ci>=? ()) ("modules/corelib/string.scm" variable gensym ()) ("modules/corelib/string.scm" glue string-append ((type function))) ("modules/corelib/string.scm" glue string-join ((type function))) ("modules/corelib/string.scm" method string-ref ()) ("modules/corelib/string.scm" method string-set! ()) ("modules/corelib/string.scm" method to-string ()) ("modules/corelib/string.scm" method to-string ()) ("modules/corelib/string.scm" method to-string ()) ("modules/corelib/string.scm" method to-string ()) ("modules/corelib/string.scm" method to-string ()) ("modules/corelib/string.scm" method to-string ()) ("modules/corelib/string.scm" method to-string ()) ("modules/corelib/string.scm" function string->byte-vector ()) ("modules/corelib/string.scm" function bvec->string ()) ("modules/corelib/string.scm" glue bvec-append2 ((type function))) ("modules/corelib/string.scm" glue bvec-append* ((type function))) ("modules/corelib/string.scm" syntax bvec-append ()) ("modules/corelib/str2num.scm" glue string->fixnum ((type function))) ("modules/corelib/str2num.scm" glue string->float ((type function))) ("modules/corelib/str2num.scm" glue string->long-int ((type function))) ("modules/corelib/str2num.scm" glue string->bignum ((type function))) ("modules/corelib/str2num.scm" glue string->rational ((type function))) ("modules/corelib/str2num.scm" function machine-bits->string ()) ("modules/corelib/num2str.scm" glue double-float->string ((type function))) ("modules/corelib/num2str.scm" glue fixnum->string ((type function))) ("modules/corelib/num2str.scm" glue long-int->string ((type function))) ("modules/corelib/num2str.scm" glue bignum->string ((type function))) ("modules/corelib/imageio.scm" glue load-image ((type function))) ("modules/corelib/imageio.scm" glue image-write-header ((type function))) ("modules/corelib/imageio.scm" glue image-read-header ((type function))) ("modules/corelib/intrglue.scm" variable *interrupt-handlers* ()) ("modules/corelib/intrglue.scm" function register-interrupt-handler! ()) ("modules/corelib/intrglue.scm" glue continue-intr-template ((type function))) ("modules/corelib/intrglue.scm" glue return-from-call-scheme ((type function))) ("modules/corelib/intrglue.scm" glue enable-subprocess-capture ((type function))) ("modules/corelib/intrglue.scm" function os-signal-name-vector ()) ("modules/corelib/intrglue.scm" function signal-number->name ()) ("modules/corelib/linkinfo.scm" glue get-c-units ((type function))) ("modules/corelib/linkinfo.scm" glue flush-link-data ((type function))) ("modules/corelib/linkinfo.scm" glue set-c-module-descr-loaded-from! ((type function))) ("modules/corelib/linkinfo.scm" glue get-c-module-descr ((type function))) ("modules/corelib/linkinfo.scm" glue c-module-root-ref ((type function))) ("modules/corelib/linkinfo.scm" glue c-module-root-set! ((type function))) ("modules/corelib/linkinfo.scm" glue get-c-part-descr ((type function))) ("modules/corelib/linkinfo.scm" glue get-c-function-descr ((type function))) ("modules/corelib/linkinfo.scm" glue find-linked-module ((type function))) ("modules/corelib/linkinfo.scm" glue find-part-in-linked-module ((type function))) ("modules/corelib/linkinfo.scm" glue find-code-ptr-in-part ((type function))) ("modules/corelib/linkinfo.scm" class <dynamic-link-error> ()) ("modules/corelib/linkinfo.scm" method display-object ()) ("modules/corelib/linkinfo.scm" function dl-error ()) ("modules/corelib/linkinfo.scm" glue dl-error-message ((type function))) ("modules/corelib/keywords.scm" function sa/as-strings ()) ("modules/corelib/keywords.scm" function symbol-append ()) ("modules/corelib/complex.scm" method real-part ()) ("modules/corelib/complex.scm" method imag-part ()) ("modules/corelib/complex.scm" method real-part ()) ("modules/corelib/complex.scm" method imag-part ()) ("modules/corelib/complex.scm" function make-polar ()) ("modules/corelib/rational.scm" syntax numerator-raw ()) ("modules/corelib/rational.scm" syntax denominator-raw ()) ("modules/corelib/rational.scm" glue raw-rational->double-float ((type function))) ("modules/corelib/basicnum.scm" glue raw-longint->double-float ((type function))) ("modules/corelib/basicnum.scm" glue raw-bignum->double-float ((type function)))))