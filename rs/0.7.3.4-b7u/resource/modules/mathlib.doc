(mathlib (*scheme* corelib primops low-scheme precore) (number? odd? sqrt rational? %transitively with-raw-float atan *default-random-state* complex->string exact? inexact? + full- define-arithmetic-order string->complex string->number full<? log/e full-random negative? remainder* round max exact->inexact $fixnum-expts quantity? complex? random full>? sin positive-fixnum-expt real-operator next-random *number-parsers* cos next-random-float raw-gcd remainder <random-float-state> real? denominator frandom full=? floor unary-fixnum-neg < full<=? min / = asin $E make-random-float-state - full* full+ string->rational* truncate tan float-result-expt log >= zero? even? $Pi gcd rational->string <= > lcm abs * integer? get-radix *default-random-float-state* full>=? <random-state> ceiling raw-lcm full/ quotient number->string numerator inexact->exact acos modulo number-as-string expt float-round positive? exp .log make-random-state) (("modules/mathlib/numbers.scm" function quantity? ()) ("modules/mathlib/numbers.scm" function number? ()) ("modules/mathlib/numbers.scm" function complex? ()) ("modules/mathlib/numbers.scm" function real? ()) ("modules/mathlib/numbers.scm" function rational? ()) ("modules/mathlib/numbers.scm" function integer? ()) ("modules/mathlib/numbers.scm" function exact? ()) ("modules/mathlib/numbers.scm" function inexact? ()) ("modules/mathlib/numbers.scm" syntax + ()) ("modules/mathlib/numbers.scm" syntax * ()) ("modules/mathlib/numbers.scm" syntax - ()) ("modules/mathlib/numbers.scm" syntax / ()) ("modules/mathlib/numbers.scm" function full+ ()) ("modules/mathlib/numbers.scm" function full- ()) ("modules/mathlib/numbers.scm" function full* ()) ("modules/mathlib/numbers.scm" function full/ ()) ("modules/mathlib/numbers.scm" syntax %transitively ()) ("modules/mathlib/numbers.scm" function zero? ()) ("modules/mathlib/numbers.scm" function negative? ()) ("modules/mathlib/numbers.scm" function positive? ()) ("modules/mathlib/numbers.scm" function even? ()) ("modules/mathlib/numbers.scm" function odd? ()) ("modules/mathlib/numbers.scm" function min ()) ("modules/mathlib/numbers.scm" function max ()) ("modules/mathlib/numbers.scm" method abs ()) ("modules/mathlib/numbers.scm" method abs ()) ("modules/mathlib/arith.scm" method floor ()) ("modules/mathlib/arith.scm" method floor ()) ("modules/mathlib/arith.scm" method floor ()) ("modules/mathlib/arith.scm" method ceiling ()) ("modules/mathlib/arith.scm" method ceiling ()) ("modules/mathlib/arith.scm" method ceiling ()) ("modules/mathlib/arith.scm" method truncate ()) ("modules/mathlib/arith.scm" method truncate ()) ("modules/mathlib/arith.scm" method truncate ()) ("modules/mathlib/arith.scm" method round ()) ("modules/mathlib/arith.scm" method round ()) ("modules/mathlib/arith.scm" method round ()) ("modules/mathlib/arith.scm" method round ()) ("modules/mathlib/arith.scm" glue float-round ((type function))) ("modules/mathlib/arith.scm" method exact->inexact ()) ("modules/mathlib/arith.scm" method exact->inexact ()) ("modules/mathlib/arith.scm" method exact->inexact ()) ("modules/mathlib/arith.scm" method exact->inexact ()) ("modules/mathlib/arith.scm" method exact->inexact ()) ("modules/mathlib/arith.scm" method exact->inexact ()) ("modules/mathlib/arith.scm" method inexact->exact ()) ("modules/mathlib/arith.scm" method inexact->exact ()) ("modules/mathlib/arith.scm" method inexact->exact ()) ("modules/mathlib/arith.scm" method inexact->exact ()) ("modules/mathlib/arith.scm" method inexact->exact ()) ("modules/mathlib/arith.scm" method inexact->exact ()) ("modules/mathlib/arith.scm" function log/e ()) ("modules/mathlib/arith.scm" variable .log ()) ("modules/mathlib/arith.scm" syntax with-raw-float ()) ("modules/mathlib/arith.scm" function atan ()) ("modules/mathlib/arith.scm" function float-result-expt ()) ("modules/mathlib/random.scm" class <random-state> ()) ("modules/mathlib/random.scm" glue make-random-state ((type function))) ("modules/mathlib/random.scm" glue next-random ((type function))) ("modules/mathlib/random.scm" class <random-float-state> ()) ("modules/mathlib/random.scm" variable *default-random-state* ()) ("modules/mathlib/random.scm" variable *default-random-float-state* ()) ("modules/mathlib/random.scm" syntax random ()) ("modules/mathlib/random.scm" function full-random ()) ("modules/mathlib/random.scm" function frandom ()) ("modules/mathlib/expt.scm" syntax unary-fixnum-neg ()) ("modules/mathlib/expt.scm" function expt ()) ("modules/mathlib/expt.scm" variable $fixnum-expts ()) ("modules/mathlib/expt.scm" function positive-fixnum-expt ()) ("modules/mathlib/numthy.scm" syntax remainder* ()) ("modules/mathlib/numthy.scm" function remainder ()) ("modules/mathlib/numthy.scm" function modulo ()) ("modules/mathlib/numthy.scm" function quotient ()) ("modules/mathlib/numthy.scm" function raw-gcd ()) ("modules/mathlib/numthy.scm" function raw-lcm ()) ("modules/mathlib/numthy.scm" function gcd ()) ("modules/mathlib/numthy.scm" function lcm ()) ("modules/mathlib/numthy.scm" function numerator ()) ("modules/mathlib/numthy.scm" function denominator ()) ("modules/mathlib/numstr.scm" variable *number-parsers* ()) ("modules/mathlib/numstr.scm" function string->rational* ()) ("modules/mathlib/numstr.scm" function get-radix ()) ("modules/mathlib/numstr.scm" function string->number ()) ("modules/mathlib/numstr.scm" function string->complex ()) ("modules/mathlib/numstr.scm" function rational->string ()) ("modules/mathlib/numstr.scm" function complex->string ()) ("modules/mathlib/numstr.scm" method number-as-string ()) ("modules/mathlib/numstr.scm" method number-as-string ()) ("modules/mathlib/numstr.scm" method number-as-string ()) ("modules/mathlib/numstr.scm" method number-as-string ()) ("modules/mathlib/numstr.scm" method number-as-string ()) ("modules/mathlib/numstr.scm" method number-as-string ()) ("modules/mathlib/numstr.scm" function number->string ()) ("modules/mathlib/numstr.scm" method to-string ())))