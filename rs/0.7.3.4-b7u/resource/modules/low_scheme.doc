(low-scheme (*scheme* corelib primops precore) (vector-map caaaar-proc bit-ref vlast map-keyword-list char<=? unsafe-cdr .map any? char-numeric? delq! big-list->vector map-vector-ref define-cNr cdaddr assoc char-ci-cmp %composite caddar-proc list->vector integer->char vmemq cadadr vector-bool-op delq caar-proc map1 assq char-downcase vector full-vector-length cadaar-proc ok-so-far kle-keyword-list map vector-xor! char-ci>? cdddr nth-cdr* dequeue-for-each nth-pair caadr char-whitespace? vfe cadddr-proc list-tail big-list->vector* cdaaar some-keywords-not-used caddr caaar-proc list-set! call-with-values char>? char>=? list? for-each1 char->integer char-alphabetic? vector-and! vector-append full-subvector keyword-list->symbol-assoc-list append-n range <keyword-list-malformed> vector-and cadr-proc last-pair cddar eqv? length caaddr cdadar char-ci>=? vector-for-each vector-xor keyword-list->assoc-list vdelq caadar last assoc-error vassq vinsert for-eachn cdaar vector->string caddr-proc append unsafe-map-cdr vector-fill! caaddr-proc %member vector-or! using-keyword-value char-lower-case? vector-length cadr caadr-proc cddar-proc cdaadr-proc cddaar-proc check-all-keywords-used unsafe-car call-with-list-extending char-code-to-upper remainder->list for-each assv vectors-min-len make-vector mapn vector->list subvector caar append-2 .map1 memq cadar cdddar-proc unsafe-map-car list-error for-each2 full-vector-slice cdadr vector-andn member vector-slice cddadr-proc append! cddr-proc cdaaar-proc cdaar-proc cdadar-proc char=? char-ci<? caaar cdadr-proc min2 vector-andn! list cdddar vinsert2 every? get-keyword-value cddddr-proc char-ci<=? cadddr reverse cddr cddddr char<? char-upper-case? map2 compose equal? caddar cddaar list-ref cadaar vector-or cdaddr-proc .map2 caaaar caaadr-proc caadar-proc cdaadr bit-set! memv vm set-kle-keyword-list! all-pairs? char-ci=? dequeue-state-as-list cdddr-proc select cdar cadar-proc caaadr cadadr-proc keyword-value-list->vector char-cmp vector-for-each/i char-upcase %assoc cdar-proc reverse! cddadr char?) (("modules/lowscm/lists.scm" glue length ((type function))) ("modules/lowscm/lists.scm" function call-with-list-extending ()) ("modules/lowscm/lists.scm" function select ()) ("modules/lowscm/lists.scm" function range ()) ("modules/lowscm/lists.scm" function list ()) ("modules/lowscm/lists.scm" function reverse ()) ("modules/lowscm/lists.scm" function reverse! ()) ("modules/lowscm/lists.scm" function delq ()) ("modules/lowscm/lists.scm" function delq! ()) ("modules/lowscm/vectors.scm" glue make-vector ((type function))) ("modules/lowscm/vectors.scm" glue list->vector ((type function))) ("modules/lowscm/vectors.scm" glue big-list->vector* ((type function))) ("modules/lowscm/vectors.scm" function big-list->vector ()) ("modules/lowscm/vectors.scm" glue vector-fill! ((type function))) ("modules/lowscm/vectors.scm" glue vector ((type function))) ("modules/lowscm/vectors.scm" syntax vector-length ()) ("modules/lowscm/vectors.scm" function full-vector-length ()) ("modules/lowscm/vectors.scm" function vector->list ()) ("modules/lowscm/vectors.scm" glue vector-append ((type function))) ("modules/lowscm/vectors.scm" syntax subvector ()) ("modules/lowscm/vectors.scm" function full-subvector ()) ("modules/lowscm/vectors.scm" syntax vector-slice ()) ("modules/lowscm/vectors.scm" function full-vector-slice ()) ("modules/lowscm/vectors.scm" method to-string ()) ("modules/lowscm/grokking.scm" syntax ok-so-far ()) ("modules/lowscm/grokking.scm" function list? ()) ("modules/lowscm/grokking.scm" function last-pair ()) ("modules/lowscm/grokking.scm" function append! ()) ("modules/lowscm/grokking.scm" function last ()) ("modules/lowscm/grokking.scm" function nth-cdr* ()) ("modules/lowscm/grokking.scm" function list-tail ()) ("modules/lowscm/grokking.scm" function nth-pair ()) ("modules/lowscm/grokking.scm" function list-ref ()) ("modules/lowscm/grokking.scm" function list-set! ()) ("modules/lowscm/mapping.scm" function unsafe-map-car ()) ("modules/lowscm/mapping.scm" function unsafe-map-cdr ()) ("modules/lowscm/mapping.scm" function all-pairs? ()) ("modules/lowscm/mapping.scm" function unsafe-car ()) ("modules/lowscm/mapping.scm" function unsafe-cdr ()) ("modules/lowscm/mapping.scm" function mapn ()) ("modules/lowscm/mapping.scm" variable .map ()) ("modules/lowscm/mapping.scm" function for-eachn ()) ("modules/lowscm/mapping.scm" variable for-each ()) ("modules/lowscm/finding.scm" function list-error ()) ("modules/lowscm/finding.scm" function assoc-error ()) ("modules/lowscm/finding.scm" syntax %assoc ()) ("modules/lowscm/finding.scm" syntax %member ()) ("modules/lowscm/finding.scm" glue assq ((type function))) ("modules/lowscm/finding.scm" function assv ()) ("modules/lowscm/finding.scm" function assoc ()) ("modules/lowscm/finding.scm" function memq ()) ("modules/lowscm/finding.scm" function memv ()) ("modules/lowscm/finding.scm" function member ()) ("modules/lowscm/chars.scm" function char? ()) ("modules/lowscm/chars.scm" function char->integer ()) ("modules/lowscm/chars.scm" function integer->char ()) ("modules/lowscm/chars.scm" syntax char-cmp ()) ("modules/lowscm/chars.scm" function char<? ()) ("modules/lowscm/chars.scm" function char=? ()) ("modules/lowscm/chars.scm" function char<=? ()) ("modules/lowscm/chars.scm" function char>? ()) ("modules/lowscm/chars.scm" function char>=? ()) ("modules/lowscm/chars.scm" syntax char-code-to-upper ()) ("modules/lowscm/chars.scm" syntax char-ci-cmp ()) ("modules/lowscm/chars.scm" function char-ci=? ()) ("modules/lowscm/chars.scm" function char-ci<? ()) ("modules/lowscm/chars.scm" function char-ci<=? ()) ("modules/lowscm/chars.scm" function char-ci>? ()) ("modules/lowscm/chars.scm" function char-ci>=? ()) ("modules/lowscm/chars.scm" function char-upcase ()) ("modules/lowscm/chars.scm" function char-downcase ()) ("modules/lowscm/chars.scm" glue char-alphabetic? ((type function))) ("modules/lowscm/chars.scm" glue char-numeric? ((type function))) ("modules/lowscm/chars.scm" glue char-whitespace? ((type function))) ("modules/lowscm/chars.scm" glue char-upper-case? ((type function))) ("modules/lowscm/chars.scm" glue char-lower-case? ((type function))) ("modules/lowscm/chars.scm" glue bit-ref ((type function))) ("modules/lowscm/chars.scm" glue bit-set! ((type function))) ("modules/lowscm/vectops.scm" syntax vfe ()) ("modules/lowscm/vectops.scm" function min2 ()) ("modules/lowscm/vectops.scm" function vectors-min-len ()) ("modules/lowscm/vectops.scm" function map-vector-ref ()) ("modules/lowscm/vectops.scm" function vector-for-each/i ()) ("modules/lowscm/vectops.scm" function vector-for-each ()) ("modules/lowscm/vectops.scm" syntax vm ()) ("modules/lowscm/vectops.scm" function vector-map ()) ("modules/lowscm/vectops.scm" glue vector-bool-op ((type function))) ("modules/lowscm/vectops.scm" function vector-or ()) ("modules/lowscm/vectops.scm" function vector-or! ()) ("modules/lowscm/vectops.scm" function vector-and ()) ("modules/lowscm/vectops.scm" function vector-and! ()) ("modules/lowscm/vectops.scm" function vector-andn ()) ("modules/lowscm/vectops.scm" function vector-andn! ()) ("modules/lowscm/vectops.scm" function vector-xor ()) ("modules/lowscm/vectops.scm" function vector-xor! ()) ("modules/lowscm/vectops.scm" function vinsert2 ()) ("modules/lowscm/vectops.scm" function vinsert ()) ("modules/lowscm/vectops.scm" function vdelq ()) ("modules/lowscm/vectops.scm" function vlast ()) ("modules/lowscm/vectops.scm" function vector->string ()) ("modules/lowscm/keywords.scm" class <keyword-list-malformed> ()) ("modules/lowscm/keywords.scm" method display-object ()) ("modules/lowscm/keywords.scm" function keyword-value-list->vector ()) ("modules/lowscm/keywords.scm" function remainder->list ()) ("modules/lowscm/keywords.scm" function using-keyword-value ()) ("modules/lowscm/keywords.scm" function get-keyword-value ()) ("modules/lowscm/keywords.scm" function check-all-keywords-used ()) ("modules/lowscm/keywords.scm" function some-keywords-not-used ()) ("modules/lowscm/keywords.scm" function keyword-list->assoc-list ()) ("modules/lowscm/keywords.scm" function keyword-list->symbol-assoc-list ()) ("modules/lowscm/keywords.scm" function map-keyword-list ()) ("modules/lowscm/callwval.scm" glue %composite ((type function))) ("modules/lowscm/callwval.scm" function compose ())))