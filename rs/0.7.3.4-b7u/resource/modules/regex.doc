(regex (tables corelib high-scheme mathlib objsys low-scheme iolib *scheme* primops precore) (unformat->proc reg-expr->offsets-proc posix-reg-expr->proc reg-expr->match-generator reg-expr-can-start? reg-expr->match reg-expr-case reg-expr->proc) (("modules/regex/rxinterp.scm" glue regex-interp ((type function))) ("modules/regex/rxinterp.scm" function reg-expr-can-start? ()) ("modules/regex/rxinterp.scm" glue regex-can-start? ((type function))) ("modules/regex/pdaclass.scm" variable $nop ()) ("modules/regex/pdaclass.scm" variable $match-char ()) ("modules/regex/pdaclass.scm" variable $match-any ()) ("modules/regex/pdaclass.scm" variable $match-char-set ()) ("modules/regex/pdaclass.scm" variable $match-str ()) ("modules/regex/pdaclass.scm" variable $accept ()) ("modules/regex/pdaclass.scm" variable $branch ()) ("modules/regex/pdaclass.scm" variable $save-place ()) ("modules/regex/pdaclass.scm" variable $match-star ()) ("modules/regex/pdaclass.scm" variable $match-plus ()) ("modules/regex/pdaclass.scm" variable $match-end ()) ("modules/regex/pdaclass.scm" variable $match-start ()) ("modules/regex/pdaclass.scm" variable $reject ()) ("modules/regex/pdaclass.scm" variable $jump ()) ("modules/regex/pdaclass.scm" variable $opcode-vector ()) ("modules/regex/pdaclass.scm" class <pda-state> ()) ("modules/regex/pdaclass.scm" method write-object ()) ("modules/regex/pdaclass.scm" method print ()) ("modules/regex/rxcompil.scm" function push-branch ()) ("modules/regex/rxcompil.scm" variable *reg-space* ()) ("modules/regex/rxcompil.scm" function compile-reg-expr ()) ("modules/regex/rxcompil.scm" function unit-pda ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-sub ()) ("modules/regex/rxcompil.scm" function empty-string ()) ("modules/regex/rxcompil.scm" function empty-string? ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-dispatch ()) ("modules/regex/rxcompil.scm" variable *regexp-macros* ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-any ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-char ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-string ()) ("modules/regex/rxcompil.scm" function char-set->pda ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-not ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-range ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-seq ()) ("modules/regex/rxcompil.scm" function match-literal-string? ()) ("modules/regex/rxcompil.scm" function character-codes-literally-matched ()) ("modules/regex/rxcompil.scm" function merge-literal-string-search! ()) ("modules/regex/rxcompil.scm" function syntax-check ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-bound ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-kleene ()) ("modules/regex/rxcompil.scm" function declare-reg ()) ("modules/regex/rxcompil.scm" function savers ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-let ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-save ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-prefix ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-suffix ()) ("modules/regex/rxcompil.scm" function compile-reg-expr-entire ()) ("modules/regex/rxcompil.scm" function should-anchor? ()) ("modules/regex/orcompil.scm" function compile-reg-expr-or ()) ("modules/regex/orcompil.scm" function generalized-or ()) ("modules/regex/bitvectr.scm" function vector-bit? ()) ("modules/regex/bitvectr.scm" function vector-bit-set! ()) ("modules/regex/bitvectr.scm" function bit-vector-or ()) ("modules/regex/bitvectr.scm" function bit-vector-not ()) ("modules/regex/onechars.scm" function single-char-form ()) ("modules/regex/onechars.scm" function single-char-scanner-proc ()) ("modules/regex/onechars.scm" function single-char-bit-vector ()) ("modules/regex/onechars.scm" function merge-single-char-forms ()) ("modules/regex/rxcodgen.scm" function flatten-machine ()) ("modules/regex/rxcodgen.scm" function make-regex-proc ()) ("modules/regex/rxcodgen.scm" function compile-and-make-proc ()) ("modules/regex/rxcodgen.scm" function reg-expr->proc ()) ("modules/regex/rxcodgen.scm" function reg-expr->offsets-proc ()) ("modules/regex/unformat.scm" function str-unfmt-pat ()) ("modules/regex/unformat.scm" function unformat/a ()) ("modules/regex/unformat.scm" function unformat/s ()) ("modules/regex/unformat.scm" function num-unfmt-pat ()) ("modules/regex/unformat.scm" function int-unfmt-pat ()) ("modules/regex/unformat.scm" function unformat/d ()) ("modules/regex/unformat.scm" variable *global-unformatters* ()) ("modules/regex/unformat.scm" function parse-unformat-opts ()) ("modules/regex/unformat.scm" function unformat->proc ()) ("modules/regex/unformat.scm" function mk-unformatter ()) ("modules/regex/unformat.scm" function mk-unformatter-exact ()) ("modules/regex/unformat.scm" function add-global-unformatter! ()) ("modules/regex/unformat.scm" function make-unformatter ()) ("modules/regex/unformat.scm" function unfmtch->pat ()) ("modules/regex/notation.scm" function parse-posix-regex ()) ("modules/regex/notation.scm" function push-item ()) ("modules/regex/notation.scm" function parse-subexpr ()) ("modules/regex/notation.scm" function build-branch-section ()) ("modules/regex/notation.scm" function parse-re ()) ("modules/regex/notation.scm" function parse-branch ()) ("modules/regex/notation.scm" function parse-piece ()) ("modules/regex/notation.scm" function parse-bound ()) ("modules/regex/notation.scm" function parse-uint ()) ("modules/regex/notation.scm" function parse-atom ()) ("modules/regex/notation.scm" function parse-bracket ()) ("modules/regex/notation.scm" function push-with-ranging ()) ("modules/regex/notation.scm" function parse-bracket-after-c ()) ("modules/regex/notation.scm" function parse-cclass-name ()) ("modules/regex/notation.scm" function posix-reg-expr->proc ()) ("modules/regex/generate.scm" function bit-vector-and ()) ("modules/regex/generate.scm" function generate-char-in-bitvec ()) ("modules/regex/generate.scm" variable *PRINTABLE* ()) ("modules/regex/generate.scm" function char-in-bitvec-generator ()) ("modules/regex/generate.scm" function bitvec->member-string ()) ("modules/regex/generate.scm" function bitvec->members ()) ("modules/regex/generate.scm" function bound2-count-generator ()) ("modules/regex/generate.scm" function bound1-count-generator ()) ("modules/regex/generate.scm" function reg-expr->match ()) ("modules/regex/generate.scm" function reg-expr->match-generator ()) ("modules/regex/generate.scm" function reg-expr->match-generator* ())))