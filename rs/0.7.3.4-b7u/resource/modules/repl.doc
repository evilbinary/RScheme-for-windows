(repl (corelib sort start mlink paths editinp codegen compiler high-scheme tables mathlib objsys low-scheme iolib *scheme* primops precore) (compile-tl-define-like ccbt main class-name->hash $default-prompt parse-slot-descriptor check-required-arg let*-rewriter make-objsys-forms cmd-proc/use pc-regs print-bdg-envt-chain display-values cmd-proc make-definer-forms check-define-class-syntax set-outer-loop! cmd-loop-limit-reached? *save-source-info* parse-supers end-of-repl generic-save-boot-image compile-early-once-only* wrap-tl-expr print-abt-frame interpret-repl-args *basic-top-level* *installed-default-command-procs?* make-basic-user-module top-level-compiler->proc objsys-compiler->proc compile-tl-define-module main-from-module tl-ref-well-known with-command-procs car-most $R4RS-specials check-key-arg lookup-or-new do-module-escape rewriter-envt-syntax-bindings *slots-sealed-by-default?* apply-backtrace* make-scheme-module <cmd-loop> rewriter-envt-procs compile-tl-define-rewriter warn go-up-n repl-condition-handler load-into *scheme-module-fns* pc-reg-ref compile-tl-define-syntax cmd-loop-depth make-user-initial make-r4rs-module do-save-image show-help parse-main-spec trust-me-for-dispatched-args *compile-verbose* prompt shift-in *show-aml* show-aml *rewriter-cache* finalize-initial-values *warranty* remove-start-cmd-loop-hook! install-tl-def compile-tl-define-class cmd-loop-restart set-cmd-loop-depth! compile/slot-index *start-cmd-loop-hook* check-define-method-syntax define-command-proc compile-tl-define-const target-expr-value make-default-command-procs compile-make cmd-loop show-warranty compile-tl-define-generic-function $R4RS-variables sub-loop expr->thunk do-rewriter module-uses-module *trace-bci* eval-in-envt run-special-command apply-backtrace runtime-instance-maker pedantic-value module-name-components->sub-dir-modules s-expr->type* suppress-abt-frame? print-bdg-envt pc-bci-program-counter envt-bound-to-class? abt-cmd apply-backtrace-available? compile/module init-user-initial-modules set-cmd-loop-restart! basic-start-repl cmd-loop-run repl-greeting generic-function? restart-with split-keywords-list *cmd-loop-prompt-hook* *bci-addrs* current-display-limit add-cmd-loop-prompt-hook! envt-self cmd-proc/apropos run-repl* set-prompt! module-name-components->in-dir-modules repl-interrupt binding-value pc-template-reg envt-bound-to-gf? envt-bound? check-rest-arg set-start-repl-proc! remove-cmd-loop-prompt-hook! compile-slot-special install-next-method-syntax fatal-condition-handler make-default-gf check-optional-arg pc-envt-ref compiler-control-sf->proc envt-binding-of compile-tl-define-alias make-load-bdg read-and-eat-whitespace command-proc-bdg pc-continuation-reg init-rewriter-envt make-module <definer> load-1 load-hier-module cmd-loop-exit provide-method outer-loop set-load-hook! load-if-exists clear-rewriter-envt compile-within-module *top-level-envt* eval-string go-top display-help-table eval-print partial-continuation? *load-path* cmd-proc/exit load-rc-files partial-continuation-bci? envt-owner print-1-pc *rc-files* compile/define-fn compile-tl-module-extend cmd-func canonicalize-path run-repl *rewriter-envt* ll->partial compile/exported-value top-level-var? find-m-by-style load-module-from-source *display-limit* *command-procs* null-load-hook errmsg module-name->rel-paths create-default-gf compile-tl-define lookup-gf-bdg load-hook *trace-apply* set-display-limit! compute-rewriter-proc *cmd-loop* find-slot-with-init-kwd target-procedure? get-bci-addrs compile-tl-define-method check-formals-list enforce-module-safety! compile-the-method compile/define-var load-module-from-path *default-user-initial* add-start-cmd-loop-hook! add-eval-bindings! pc-jump-addr go-up submit-new-syntax cmd-loop-once dispatched-on-type hier-find-module cmd-proc/width start-repl compile-early-once-only wrap-tl-proc show-bt cmd-proc/export com-esc-name set-cmd-loop-exit! compile-module-form run-script apropos* set-compiler-verbose-mode! make-hackerly-forms pc-envt-reg locate-for-load check-define-generic-function-syntax) (("modules/repl/definers.scm" class <definer> ()) ("modules/repl/definers.scm" method compile-head ()) ("modules/repl/definers.scm" function car-most ()) ("modules/repl/definers.scm" function install-tl-def ()) ("modules/repl/definers.scm" function compile-tl-define ()) ("modules/repl/definers.scm" function compile-tl-define-const ()) ("modules/repl/definers.scm" function compile-tl-define-like ()) ("modules/repl/definers.scm" variable *compile-verbose* ()) ("modules/repl/definers.scm" variable *save-source-info* ()) ("modules/repl/definers.scm" function compile/define-fn ()) ("modules/repl/definers.scm" function compile/define-var ()) ("modules/repl/definers.scm" function compile-tl-define-syntax ()) ("modules/repl/definers.scm" function submit-new-syntax ()) ("modules/repl/definers.scm" function compile-tl-define-alias ()) ("modules/repl/definers.scm" function compile-tl-define-rewriter ()) ("modules/repl/definers.scm" function top-level-compiler->proc ()) ("modules/repl/definers.scm" function make-definer-forms ()) ("modules/repl/objforms.scm" function class-name->hash ()) ("modules/repl/objforms.scm" function make-objsys-forms ()) ("modules/repl/objforms.scm" function objsys-compiler->proc ()) ("modules/repl/objforms.scm" function compile-tl-define-class ()) ("modules/repl/objforms.scm" function dispatched-on-type ()) ("modules/repl/objforms.scm" function compile-the-method ()) ("modules/repl/objforms.scm" function trust-me-for-dispatched-args ()) ("modules/repl/objforms.scm" function lookup-gf-bdg ()) ("modules/repl/objforms.scm" function provide-method ()) ("modules/repl/objforms.scm" function compile-tl-define-method ()) ("modules/repl/objforms.scm" method install-next-method-syntax ()) ("modules/repl/objforms.scm" function make-default-gf ()) ("modules/repl/objforms.scm" function create-default-gf ()) ("modules/repl/objforms.scm" function compile-tl-define-generic-function ()) ("modules/repl/objforms.scm" function parse-supers ()) ("modules/repl/objforms.scm" function split-keywords-list ()) ("modules/repl/objforms.scm" function find-slot-with-init-kwd ()) ("modules/repl/objforms.scm" function finalize-initial-values ()) ("modules/repl/objforms.scm" function tl-ref-well-known ()) ("modules/repl/objforms.scm" function target-expr-value ()) ("modules/repl/parsslot.scm" function target-procedure? ()) ("modules/repl/parsslot.scm" variable *slots-sealed-by-default?* ()) ("modules/repl/parsslot.scm" function parse-slot-descriptor ()) ("modules/repl/slotindx.scm" function compile-slot-special ()) ("modules/repl/slotindx.scm" function compile/slot-index ()) ("modules/repl/objsyntx.scm" function warn ()) ("modules/repl/objsyntx.scm" function errmsg ()) ("modules/repl/objsyntx.scm" function check-define-generic-function-syntax ()) ("modules/repl/objsyntx.scm" function check-define-class-syntax ()) ("modules/repl/objsyntx.scm" function check-formals-list ()) ("modules/repl/objsyntx.scm" function check-required-arg ()) ("modules/repl/objsyntx.scm" function check-rest-arg ()) ("modules/repl/objsyntx.scm" function check-optional-arg ()) ("modules/repl/objsyntx.scm" function check-key-arg ()) ("modules/repl/objsyntx.scm" function check-define-method-syntax ()) ("modules/repl/objsyntx.scm" function envt-bound-to-gf? ()) ("modules/repl/objsyntx.scm" function envt-bound-to-class? ()) ("modules/repl/objsyntx.scm" function envt-binding-of ()) ("modules/repl/objsyntx.scm" function envt-bound? ()) ("modules/repl/objsyntx.scm" function generic-function? ()) ("modules/repl/objsyntx.scm" function top-level-var? ()) ("modules/repl/objsyntx.scm" function binding-value ()) ("modules/repl/make.scm" function runtime-instance-maker ()) ("modules/repl/make.scm" function compile-make ()) ("modules/repl/load.scm" function load-into ()) ("modules/repl/load.scm" function canonicalize-path ()) ("modules/repl/load.scm" function null-load-hook ()) ("modules/repl/load.scm" variable load-hook ()) ("modules/repl/load.scm" function set-load-hook! ()) ("modules/repl/load.scm" function locate-for-load ()) ("modules/repl/load.scm" function load-1 ()) ("modules/repl/cmdloop.scm" class <cmd-loop> ()) ("modules/repl/cmdloop.scm" function sub-loop ()) ("modules/repl/cmdloop.scm" function cmd-loop ()) ("modules/repl/cmdloop.scm" function cmd-loop-limit-reached? ()) ("modules/repl/cmdloop.scm" function cmd-loop-run ()) ("modules/repl/cmdloop.scm" function cmd-loop-once ()) ("modules/repl/cmdloop.scm" function read-and-eat-whitespace ()) ("modules/repl/cmdloop.scm" function eval-string ()) ("modules/repl/cmdloop.scm" function eval-in-envt ()) ("modules/repl/cmdloop.scm" function expr->thunk ()) ("modules/repl/cmdloop.scm" function eval-print ()) ("modules/repl/cmdloop.scm" function lookup-or-new ()) ("modules/repl/cmdloop.scm" function shift-in ()) ("modules/repl/cmdloop.scm" variable *display-limit* ()) ("modules/repl/cmdloop.scm" function current-display-limit ()) ("modules/repl/cmdloop.scm" function set-display-limit! ()) ("modules/repl/cmdloop.scm" function display-values ()) ("modules/repl/cmdloop.scm" function show-aml ()) ("modules/repl/cmdloop.scm" variable *show-aml* ()) ("modules/repl/cmdloop.scm" function wrap-tl-expr ()) ("modules/repl/cmdloop.scm" function wrap-tl-proc ()) ("modules/repl/cmdprocs.scm" variable *command-procs* ()) ("modules/repl/cmdprocs.scm" variable *installed-default-command-procs?* ()) ("modules/repl/cmdprocs.scm" function command-proc-bdg ()) ("modules/repl/cmdprocs.scm" function with-command-procs ()) ("modules/repl/cmdprocs.scm" function run-special-command ()) ("modules/repl/cmdprocs.scm" function cmd-proc ()) ("modules/repl/cmdprocs.scm" function cmd-func ()) ("modules/repl/cmdprocs.scm" variable *trace-bci* ()) ("modules/repl/cmdprocs.scm" variable *trace-apply* ()) ("modules/repl/cmdprocs.scm" syntax define-command-proc ()) ("modules/repl/cmdprocs.scm" function make-default-command-procs ()) ("modules/repl/cmdprocs.scm" function cmd-proc/exit ()) ("modules/repl/cmdprocs.scm" function cmd-proc/width ()) ("modules/repl/cmdprocs.scm" function cmd-proc/export ()) ("modules/repl/cmdprocs.scm" function cmd-proc/use ()) ("modules/repl/cmdprocs.scm" function end-of-repl ()) ("modules/repl/cmdprocs.scm" function go-up-n ()) ("modules/repl/cmdprocs.scm" function go-up ()) ("modules/repl/cmdprocs.scm" function go-top ()) ("modules/repl/cmdprocs.scm" function cmd-proc/apropos ()) ("modules/repl/cmdprocs.scm" function show-help ()) ("modules/repl/cmdprocs.scm" variable *warranty* ()) ("modules/repl/cmdprocs.scm" function show-warranty ()) ("modules/repl/cmdprocs.scm" function display-help-table ()) ("modules/repl/cmdprocs.scm" function apropos* ()) ("modules/repl/backtrac.scm" function suppress-abt-frame? ()) ("modules/repl/backtrac.scm" method apply-backtrace ()) ("modules/repl/backtrac.scm" method apply-backtrace ()) ("modules/repl/backtrac.scm" method apply-backtrace ()) ("modules/repl/backtrac.scm" method print-abt-frame ()) ("modules/repl/backtrac.scm" method print-abt-frame ()) ("modules/repl/backtrac.scm" function apply-backtrace* ()) ("modules/repl/backtrac.scm" function abt-cmd ()) ("modules/repl/defmodule.scm" function com-esc-name ()) ("modules/repl/defmodule.scm" function compile-module-form ()) ("modules/repl/defmodule.scm" function compile-within-module ()) ("modules/repl/defmodule.scm" function compile/module ()) ("modules/repl/defmodule.scm" function compile-tl-define-module ()) ("modules/repl/defmodule.scm" function compile-tl-module-extend ()) ("modules/repl/defmodule.scm" function do-module-escape ()) ("modules/repl/loadmodule.scm" function module-name-components->sub-dir-modules ()) ("modules/repl/loadmodule.scm" function module-name-components->in-dir-modules ()) ("modules/repl/loadmodule.scm" function module-name->rel-paths ()) ("modules/repl/loadmodule.scm" function find-m-by-style ()) ("modules/repl/loadmodule.scm" function hier-find-module ()) ("modules/repl/loadmodule.scm" function load-module-from-source ()) ("modules/repl/loadmodule.scm" function load-hier-module ()) ("modules/repl/replcli.scm" function fatal-condition-handler ()) ("modules/repl/replcli.scm" function apply-backtrace-available? ()) ("modules/repl/replcli.scm" function repl-condition-handler ()) ("modules/repl/replcli.scm" function repl-interrupt ()) ("modules/repl/replcli.scm" function restart-with ()) ("modules/repl/replcli.scm" function generic-save-boot-image ()) ("modules/repl/replcli.scm" variable *default-user-initial* ()) ("modules/repl/replcli.scm" function main ()) ("modules/repl/replcli.scm" function run-repl ()) ("modules/repl/replcli.scm" function run-repl* ()) ("modules/repl/replcli.scm" function basic-start-repl ()) ("modules/repl/replcli.scm" variable start-repl ()) ("modules/repl/replcli.scm" function set-start-repl-proc! ()) ("modules/repl/replcli.scm" variable repl-greeting ()) ("modules/repl/replcli.scm" variable *rc-files* ()) ("modules/repl/replcli.scm" function load-rc-files ()) ("modules/repl/replcli.scm" function load-if-exists ()) ("modules/repl/replcli.scm" variable $default-prompt ()) ("modules/repl/replcli.scm" function run-script ()) ("modules/repl/replcli.scm" function interpret-repl-args ()) ("modules/repl/replcli.scm" function parse-main-spec ()) ("modules/repl/replcli.scm" function main-from-module ()) ("modules/repl/replcli.scm" function do-save-image ()) ("modules/repl/replcli.scm" function load-module-from-path ()) ("modules/repl/replcli.scm" function set-compiler-verbose-mode! ()) ("modules/repl/rewrites.scm" function do-rewriter ()) ("modules/repl/rewrites.scm" function let*-rewriter ()) ("modules/repl/rewriters.scm" variable *rewriter-cache* ()) ("modules/repl/rewriters.scm" variable *rewriter-envt* ()) ("modules/repl/rewriters.scm" function s-expr->type* ()) ("modules/repl/rewriters.scm" function clear-rewriter-envt ()) ("modules/repl/rewriters.scm" function init-rewriter-envt ()) ("modules/repl/rewriters.scm" function envt-self ()) ("modules/repl/rewriters.scm" function envt-owner ()) ("modules/repl/rewriters.scm" function rewriter-envt-procs ()) ("modules/repl/rewriters.scm" function rewriter-envt-syntax-bindings ()) ("modules/repl/rewriters.scm" method rewriter-lex-envt ()) ("modules/repl/rewriters.scm" method rewriter-dyn-envt ()) ("modules/repl/rewriters.scm" method compute-rewriter-proc ()) ("modules/repl/rewriters.scm" method compile-head ()) ("modules/repl/rewriters.scm" method compile-ref ()) ("modules/repl/rewriters.scm" method compile-set ()) ("modules/repl/userinit.scm" function make-module ()) ("modules/repl/userinit.scm" function make-r4rs-module ()) ("modules/repl/userinit.scm" function pedantic-value ()) ("modules/repl/userinit.scm" variable $R4RS-specials ()) ("modules/repl/userinit.scm" variable $R4RS-variables ()) ("modules/repl/userinit.scm" function add-eval-bindings! ()) ("modules/repl/userinit.scm" function make-load-bdg ()) ("modules/repl/userinit.scm" function make-user-initial ()) ("modules/repl/userinit.scm" variable *basic-top-level* ()) ("modules/repl/userinit.scm" function make-scheme-module ()) ("modules/repl/userinit.scm" variable *scheme-module-fns* ()) ("modules/repl/userinit.scm" function init-user-initial-modules ()) ("modules/repl/userinit.scm" function module-uses-module ()) ("modules/repl/userinit.scm" function make-basic-user-module ()) ("modules/repl/userinit.scm" function enforce-module-safety! ()) ("modules/repl/userinit.scm" function compile/exported-value ()) ("modules/repl/userinit.scm" function compile-early-once-only ()) ("modules/repl/userinit.scm" function make-hackerly-forms ()) ("modules/repl/userinit.scm" function compile-early-once-only* ()) ("modules/repl/userinit.scm" function compiler-control-sf->proc ()) ("modules/repl/ccbt.scm" function partial-continuation? ()) ("modules/repl/ccbt.scm" variable *bci-addrs* ()) ("modules/repl/ccbt.scm" function get-bci-addrs ()) ("modules/repl/ccbt.scm" function partial-continuation-bci? ()) ("modules/repl/ccbt.scm" function pc-envt-reg ()) ("modules/repl/ccbt.scm" function pc-template-reg ()) ("modules/repl/ccbt.scm" function pc-jump-addr ()) ("modules/repl/ccbt.scm" function pc-continuation-reg ()) ("modules/repl/ccbt.scm" function pc-bci-program-counter ()) ("modules/repl/ccbt.scm" function pc-regs ()) ("modules/repl/ccbt.scm" function pc-reg-ref ()) ("modules/repl/ccbt.scm" function pc-envt-ref ()) ("modules/repl/ccbt.scm" function ll->partial ()) ("modules/repl/ccbt.scm" function print-bdg-envt ()) ("modules/repl/ccbt.scm" function print-bdg-envt-chain ()) ("modules/repl/ccbt.scm" function print-1-pc ()) ("modules/repl/ccbt.scm" method print ()) ("modules/repl/ccbt.scm" function ccbt ()) ("modules/repl/ccbt.scm" function show-bt ())))