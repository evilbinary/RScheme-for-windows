(codegen (mlink corelib compiler paths tables mathlib objsys low-scheme iolib *scheme* primops precore) (code-ctx-properties current-code-context flush-to-register gen-aml-bind se-stmt reg-ref? *num-frames-now-reg-alloced* *code-context* emit-raw-bool help-par-assmt make-list-expr code-ctx-add-property! gen-rearranged-aml aml-return aml-expr-is-obj? emit-restore gen-aml-loop pop-envts *current-bc-accum* simple? emit-check= ref-label gen-fill-code emit-branch-if-false compile-aml-expr *codegen-implementations* gen-simple-aml emit-byte-code-16-check emit-tl-ref/bound emit-reg-xfer emit-use-function-envt gen-aml-combo* reg-ref-reg int-const emit-applyg code-ctx-literals shift-regs gen-aml-bind-to-heap expr->aml emit-byte-code <byte-code-accum> current-pc num-targets alloc-label aml->byte-coded new-anonymous multi-bind-fixed emit-return emit-immob gen-aml-bind*0 emit-collect> def-label add-codegen-implementation! overlap? gen-aml *debug-byte-codes* aml->template emit-reg-ref code-ctx-extend-property! emit-applyf alloc-temp-label gen-aml-jump lex-var bc-template-prototype emit-unbind patch-table emit-special-primop *save-captured-envt-info* emit-literal code-ctx-literals* normalize-bind-exprs set-current-pc! *num-anonymous* emit-tl-set emit-bjump emit-reg-set emit-make-primop emit-byte-code-s16-check flatten-ct-envt *global-codegen-strategy* find-lex-addr pad-or-split-exprs label-table emit-tl-ref procedure->aml move-stmt! emit-bind emit-this-function aml-applyg emit-closure emit-gvec-load set-patch-table! gen-aml-combo emit-primop alloc-literal next-temp-to-use gen-aml* emit-set-false< emit-gvec-store emit-save aml-apply se-expr make-binder apply-opcode emit-pop set-label-table! choose-strategy emit-fixnum small-aml-int-const gen-aml-dbl-bind emit-use-empty-envt gen-aml-tail-combo gen-aml-ref gen-primop-expr $false coalesce-literal aml-save aml-restore get-label emit-apply emit-raw-int $true emit-bind-first-regs emit-byte-code-s32 make-se num-reg-bind-regs emit-byte-code-check gen-exprs-to-reg-seq flush-byte-codes cons-expr aml-bind aml-if make-runtime-bind gen-parallel-assmt *num-vars-now-reg-alloced* compile-aml-stmt emit-lex-set $nil emit-lex-ref aml-set! gen-aml-bind-to-regs aml-expr-is-raw-bool? use-regs jam-together make-runtime-bind*2 kget get-current-pc aml-applyf regs-used default-aml->template make-byte-code-accum list-brk make-code-ctx inc! bind-to-heap? tl-var bytecode-aml->template gen-aml-lazy-args *bc-template-prototype* trivial? gen-primop-expr-no-opt gen-aml-bind*2 gen-aml-set $nop vmemq+ emit-jump emit-check>=) (("modules/codegen/genaml.scm" syntax gen-aml ()) ("modules/codegen/genaml.scm" variable $nil ()) ("modules/codegen/genaml.scm" variable $true ()) ("modules/codegen/genaml.scm" variable $false ()) ("modules/codegen/genaml.scm" function num-reg-bind-regs ()) ("modules/codegen/genaml.scm" function num-targets ()) ("modules/codegen/genaml.scm" syntax make-se ()) ("modules/codegen/genaml.scm" syntax se-stmt ()) ("modules/codegen/genaml.scm" syntax se-expr ()) ("modules/codegen/genaml.scm" function reg-ref-reg ()) ("modules/codegen/genaml.scm" function cons-expr ()) ("modules/codegen/genaml.scm" function int-const ()) ("modules/codegen/genaml.scm" function make-list-expr ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" function gen-simple-aml ()) ("modules/codegen/genaml.scm" syntax make-code-ctx ()) ("modules/codegen/genaml.scm" syntax code-ctx-literals* ()) ("modules/codegen/genaml.scm" function code-ctx-literals ()) ("modules/codegen/genaml.scm" syntax code-ctx-properties ()) ("modules/codegen/genaml.scm" function code-ctx-add-property! ()) ("modules/codegen/genaml.scm" function code-ctx-extend-property! ()) ("modules/codegen/genaml.scm" syntax current-code-context ()) ("modules/codegen/genaml.scm" syntax alloc-label ()) ("modules/codegen/genaml.scm" function coalesce-literal ()) ("modules/codegen/genaml.scm" function alloc-literal ()) ("modules/codegen/genaml.scm" function simple? ()) ("modules/codegen/genaml.scm" function lex-var ()) ("modules/codegen/genaml.scm" function tl-var ()) ("modules/codegen/genaml.scm" function normalize-bind-exprs ()) ("modules/codegen/genaml.scm" function make-binder ()) ("modules/codegen/genaml.scm" syntax gen-aml-ref ()) ("modules/codegen/genaml.scm" function gen-aml-set ()) ("modules/codegen/genaml.scm" variable *num-anonymous* ()) ("modules/codegen/genaml.scm" function new-anonymous ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" function use-regs ()) ("modules/codegen/genaml.scm" function shift-regs ()) ("modules/codegen/genaml.scm" function pop-envts ()) ("modules/codegen/genaml.scm" function apply-opcode ()) ("modules/codegen/genaml.scm" function gen-aml-tail-combo ()) ("modules/codegen/genaml.scm" function gen-aml-combo ()) ("modules/codegen/genaml.scm" function gen-aml-combo* ()) ("modules/codegen/genaml.scm" function make-runtime-bind ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" function gen-exprs-to-reg-seq ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" function gen-aml-lazy-args ()) ("modules/codegen/genaml.scm" function flush-to-register ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" method gen-aml* ()) ("modules/codegen/genaml.scm" variable *save-captured-envt-info* ()) ("modules/codegen/genaml.scm" function flatten-ct-envt ()) ("modules/codegen/genaml.scm" function procedure->aml ()) ("modules/codegen/genaml.scm" function expr->aml ()) ("modules/codegen/genaml.scm" function regs-used ()) ("modules/codegen/genaml.scm" function gen-aml-dbl-bind ()) ("modules/codegen/genaml.scm" function gen-fill-code ()) ("modules/codegen/genaml.scm" function gen-aml-bind-to-heap ()) ("modules/codegen/genaml.scm" function gen-aml-bind-to-regs ()) ("modules/codegen/genaml.scm" variable *num-frames-now-reg-alloced* ()) ("modules/codegen/genaml.scm" variable *num-vars-now-reg-alloced* ()) ("modules/codegen/genaml.scm" syntax inc! ()) ("modules/codegen/genaml.scm" function bind-to-heap? ()) ("modules/codegen/genaml.scm" function gen-aml-bind ()) ("modules/codegen/rearrnge.scm" function gen-rearranged-aml ()) ("modules/codegen/rearrnge.scm" function multi-bind-fixed ()) ("modules/codegen/rearrnge.scm" function pad-or-split-exprs ()) ("modules/codegen/rearrnge.scm" function list-brk ()) ("modules/codegen/rearrnge.scm" function trivial? ()) ("modules/codegen/parassmt.scm" function next-temp-to-use ()) ("modules/codegen/parassmt.scm" function gen-parallel-assmt ()) ("modules/codegen/parassmt.scm" variable $nop ()) ("modules/codegen/parassmt.scm" function help-par-assmt ()) ("modules/codegen/parassmt.scm" function jam-together ()) ("modules/codegen/parassmt.scm" function vmemq+ ()) ("modules/codegen/parassmt.scm" function move-stmt! ()) ("modules/codegen/parassmt.scm" function overlap? ()) ("modules/codegen/loops.scm" function make-runtime-bind*2 ()) ("modules/codegen/loops.scm" function gen-aml-bind*0 ()) ("modules/codegen/loops.scm" function gen-aml-bind*2 ()) ("modules/codegen/loops.scm" function gen-aml-loop ()) ("modules/codegen/loops.scm" function gen-aml-jump ()) ("modules/codegen/lexaddr.scm" function find-lex-addr ()) ("modules/codegen/aml2tmpl.scm" variable *bc-template-prototype* ()) ("modules/codegen/aml2tmpl.scm" function bytecode-aml->template ()) ("modules/codegen/aml2tmpl.scm" function default-aml->template ()) ("modules/codegen/aml2tmpl.scm" variable *codegen-implementations* ()) ("modules/codegen/aml2tmpl.scm" function add-codegen-implementation! ()) ("modules/codegen/aml2tmpl.scm" variable *global-codegen-strategy* ()) ("modules/codegen/aml2tmpl.scm" function choose-strategy ()) ("modules/codegen/aml2tmpl.scm" function aml->template ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-return ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-literal ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-closure ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-apply ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-reg-set ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-reg-ref ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-reg-xfer ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-pop ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-lex-ref ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-lex-set ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-tl-ref ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-tl-set ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-immob ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-make-primop ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-special-primop ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-save ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-restore ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-jump ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-bjump ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-branch-if-false ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-check= ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-check>= ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-set-false< ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-collect> ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-unbind ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-bind-first-regs ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-bind ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-raw-int ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-fixnum ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-raw-bool ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-this-function ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-use-function-envt ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-use-empty-envt ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-gvec-load ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-gvec-store ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-applyf ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-applyg ()) ("[dist]/install/resource/compiler/bytecode/bcgen.scm" function emit-tl-ref/bound ()) ("modules/codegen/aml2bc.scm" function aml-expr-is-obj? ()) ("modules/codegen/aml2bc.scm" function aml-expr-is-raw-bool? ()) ("modules/codegen/aml2bc.scm" function compile-aml-stmt ()) ("modules/codegen/aml2bc.scm" variable alloc-temp-label ()) ("modules/codegen/aml2bc.scm" function aml-if ()) ("modules/codegen/aml2bc.scm" function reg-ref? ()) ("modules/codegen/aml2bc.scm" function aml-bind ()) ("modules/codegen/aml2bc.scm" function aml-save ()) ("modules/codegen/aml2bc.scm" function aml-restore ()) ("modules/codegen/aml2bc.scm" function aml-return ()) ("modules/codegen/aml2bc.scm" function aml-apply ()) ("modules/codegen/aml2bc.scm" function aml-applyg ()) ("modules/codegen/aml2bc.scm" function aml-applyf ()) ("modules/codegen/aml2bc.scm" function aml-set! ()) ("modules/codegen/aml2bc.scm" function compile-aml-expr ()) ("modules/codegen/aml2bc.scm" function gen-primop-expr-no-opt ()) ("modules/codegen/aml2bc.scm" function gen-primop-expr ()) ("modules/codegen/aml2bc.scm" function small-aml-int-const ()) ("modules/codegen/support.scm" class <byte-code-accum> ()) ("modules/codegen/support.scm" function make-byte-code-accum ()) ("modules/codegen/support.scm" function get-current-pc ()) ("modules/codegen/support.scm" variable *debug-byte-codes* ()) ("modules/codegen/support.scm" function emit-byte-code ()) ("modules/codegen/support.scm" function flush-byte-codes ()) ("modules/codegen/support.scm" function def-label ()) ("modules/codegen/support.scm" function ref-label ()) ("modules/codegen/support.scm" function emit-byte-code-check ()) ("modules/codegen/support.scm" function emit-byte-code-16-check ()) ("modules/codegen/support.scm" function emit-byte-code-s16-check ()) ("modules/codegen/support.scm" function emit-byte-code-s32 ()) ("modules/codegen/support.scm" function emit-primop ()) ("modules/codegen/support.scm" function get-label ()) ("modules/codegen/support.scm" function aml->byte-coded ()) ("modules/codegen/support.scm" syntax kget ())))