(#(base->string (<obj> <raw-int>) <string> ((ccode . "basic_num_to_string_obj") (bytecode . 250))) #(dequeue-delq! (<obj> <obj>) <raw-int> ((ccode . "dequeue_delq") (bytecode . 249))) #(dequeue-memq (<obj> <obj>) <obj> ((ccode . "dequeue_memq") (bytecode . 248))) #(as-raw-float (<obj>) <raw-float> ((ccode . "basic_raw_float") (bytecode . 247))) #(as-raw-int (<obj>) <raw-int> ((ccode . "basic_raw_int") (bytecode . 246))) #(make-exception-stack () <obj> ((ccode . "make_exception_stack") (bytecode . 245))) #(get-bytecode-correlation () <vector> ((ccode . "get_bytecode_correlation") (bytecode . 244))) #(procedure? (<obj>) <raw-bool> ((ccode . "FUNCTION_P") (bytecode . 243))) #(errno-message (<raw-int>) <string> ((ccode . "os_errormsg") (bytecode . 242))) #(subvector* (<vector> <fixnum> <fixnum>) <vector> ((ccode . "subvector") (bytecode . 241))) #(%profile-append-defn (<obj> <obj>) #f ((ccode . "rsprof_app_defn_rec") (bytecode . 240))) #(%profile-objects (<obj> <obj>) #f ((ccode . "rsprof_collect_objects") (bytecode . 239))) #(%profile-stop () <raw-bool> ((ccode . "rsprof_stop") (bytecode . 238))) #(%profile-start (<raw-string> <raw-bool> <raw-bool>) #f ((ccode . "rsprof_start") (bytecode . 237))) #(check-instance (<obj> <<class>>) <obj> ((ccode . "CHECK_INSTANCE") (bytecode . 236))) #(check-boolean (<obj>) <boolean> ((ccode . "CHECK_BOOLEAN") (bytecode . 235))) #(check-unicode-char (<obj>) <unicode-char> ((ccode . "CHECK_UNICODE_CHAR") (bytecode . 234))) #(check-ascii-char (<obj>) <ascii-char> ((ccode . "CHECK_ASCII_CHAR") (bytecode . 233))) #(check-long-int (<obj>) <long-int> ((ccode . "CHECK_LONG_INT") (bytecode . 232))) #(check-double-float (<obj>) <double-float> ((ccode . "CHECK_DOUBLE_FLOAT") (bytecode . 231))) #(check-string (<obj>) <string> ((ccode . "CHECK_STRING") (bytecode . 230))) #(check-class (<obj>) <<class>> ((ccode . "CHECK_CLASS") (bytecode . 229))) #(check-function (<obj>) <function> ((ccode . "CHECK_FUNCTION") (bytecode . 228))) #(check-vector (<obj>) <vector> ((ccode . "CHECK_VECTOR") (bytecode . 227))) #(check-symbol (<obj>) <symbol> ((ccode . "CHECK_SYMBOL") (bytecode . 226))) #(check-pair (<obj>) <pair> ((ccode . "CHECK_PAIR") (bytecode . 225))) #(check-bvec (<obj>) <bvec> ((ccode . "CHECK_BVEC") (bytecode . 224))) #(check-gvec (<obj>) <gvec> ((ccode . "CHECK_GVEC") (bytecode . 223))) #(check-fixnum (<obj>) <fixnum> ((ccode . "CHECK_FIXNUM") (bytecode . 222))) #(check-immob (<obj>) <immob> ((ccode . "CHECK_IMMOB") (bytecode . 221))) #(check-ptr (<obj>) <ptr> ((ccode . "CHECK_PTR") (bytecode . 220))) #(set-thread-state-reg! (<obj>) #f ((ccode . "SET_THREAD_STATE_REG") (bytecode . 219))) #(get-thread-state-reg () <obj> ((ccode . "GET_THREAD_STATE_REG") (bytecode . 218))) #(base-modulo (<obj> <obj>) <obj> ((ccode . "basic_modulo") (bytecode . 217))) #(base-remainder (<obj> <obj>) <obj> ((ccode . "basic_remainder") (bytecode . 216))) #(base-quotient (<obj> <obj>) <obj> ((ccode . "basic_quotient") (bytecode . 215))) #(base/ (<obj> <obj>) <obj> ((ccode . "basic_div") (bytecode . 214))) #(base* (<obj> <obj>) <obj> ((ccode . "basic_mul") (bytecode . 213))) #(set-sigqueue-size! (<raw-int>) #f ((ccode . "set_sigqueue_size") (bytecode . 212))) #(dequeue-set! (<obj> <fixnum> <obj>) <obj> ((ccode . "dequeue_set") (bytecode . 211))) #(dequeue-ref (<obj> <fixnum>) <obj> ((ccode . "dequeue_ref") (bytecode . 210))) #(dequeue-pop-back! (<obj>) <obj> ((ccode . "dequeue_pop_back") (bytecode . 209))) #(dequeue-pop-front! (<obj>) <obj> ((ccode . "dequeue_pop_front") (bytecode . 208))) #(dequeue-push-back! (<obj> <obj>) #f ((ccode . "dequeue_push_back") (bytecode . 207))) #(dequeue-push-front! (<obj> <obj>) #f ((ccode . "dequeue_push_front") (bytecode . 206))) #(dequeue-state (<obj>) <vector> ((ccode . "dequeue_state") (bytecode . 205))) #(dequeue-count (<obj>) <fixnum> ((ccode . "dequeue_count") (bytecode . 204))) #(dequeue-empty? (<obj>) <raw-bool> ((ccode . "dequeue_empty") (bytecode . 203))) #(make-dequeue () <obj> ((ccode . "make_dequeue") (bytecode . 202))) #(os-set-sigenable (<raw-bool>) <raw-bool> ((ccode . "os_set_sigenable") (bytecode . 201))) #(os-mkdir (<raw-string>) #f ((ccode . "os_mkdir") (bytecode . 200))) #(base=? (<obj> <obj>) <raw-bool> ((ccode . "basic_eq_q") (bytecode . 199))) #(base<=? (<obj> <obj>) <raw-bool> ((ccode . "basic_le_q") (bytecode . 198))) #(base<? (<obj> <obj>) <raw-bool> ((ccode . "basic_lt_q") (bytecode . 197))) #(base>=? (<obj> <obj>) <raw-bool> ((ccode . "basic_ge_q") (bytecode . 196))) #(base>? (<obj> <obj>) <raw-bool> ((ccode . "basic_gt_q") (bytecode . 195))) #(base- (<obj> <obj>) <obj> ((ccode . "basic_minus") (bytecode . 194))) #(base+ (<obj> <obj>) <obj> ((ccode . "basic_plus") (bytecode . 193))) #(float-pow (<raw-float> <raw-float>) <raw-float> ((ccode . "pow") (bytecode . 192))) #(float-atan2 (<raw-float> <raw-float>) <raw-float> ((ccode . "atan2") (bytecode . 191))) #(float-atan1 (<raw-float>) <raw-float> ((ccode . "atan") (bytecode . 190))) #(float-sqrt (<raw-float>) <raw-float> ((ccode . "sqrt") (bytecode . 189))) #(float-acos (<raw-float>) <raw-float> ((ccode . "acos") (bytecode . 188))) #(float-asin (<raw-float>) <raw-float> ((ccode . "asin") (bytecode . 187))) #(float-tan (<raw-float>) <raw-float> ((ccode . "tan") (bytecode . 186))) #(float-cos (<raw-float>) <raw-float> ((ccode . "cos") (bytecode . 185))) #(float-sin (<raw-float>) <raw-float> ((ccode . "sin") (bytecode . 184))) #(float-log (<raw-float>) <raw-float> ((ccode . "log") (bytecode . 183))) #(float-exp (<raw-float>) <raw-float> ((ccode . "exp") (bytecode . 182))) #(raw-int->raw-float (<raw-int>) <raw-float> ((ccode . "FX_FLOAT") (bytecode . 181))) #(raw-int->double-float (<raw-int>) <double-float> ((ccode . "make_float") (bytecode . 180))) #(float-truncate (<raw-float>) <obj> ((ccode . "float_truncate") (bytecode . 179))) #(float-truncate* (<raw-float>) <raw-int> ((ccode . "FLT_TRUNC") (bytecode . 178))) #(float-ceiling (<raw-float>) <raw-float> ((ccode . "ceil") (bytecode . 177))) #(float-floor (<raw-float>) <raw-float> ((ccode . "floor") (bytecode . 176))) #(raw-int-64-modulo (<raw-int-64> <raw-int-64>) <raw-int-64> ((ccode . "int_64_modulo") (bytecode . 175))) #(raw-int-64-remainder (<raw-int-64> <raw-int-64>) <raw-int-64> ((ccode . "int_64_remainder") (bytecode . 174))) #(raw-int-64-quotient (<raw-int-64> <raw-int-64>) <raw-int-64> ((ccode . "int_64_quotient") (bytecode . 173))) #(raw-int-64* (<raw-int-64> <raw-int-64>) <raw-int-64> ((ccode . "int_64_mul") (bytecode . 172))) #(raw-int-64- (<raw-int-64> <raw-int-64>) <raw-int-64> ((ccode . "int_64_sub") (bytecode . 171))) #(raw-int-64+ (<raw-int-64> <raw-int-64>) <raw-int-64> ((ccode . "int_64_add") (bytecode . 170))) #(raw-int-64-neg (<raw-int-64>) <raw-int-64> ((ccode . "int_64_neg") (bytecode . 169))) #(raw-int-64-negative? (<raw-int-64>) <raw-bool> ((ccode . "int_64_neg_q") (bytecode . 168))) #(raw-int-64-small? (<raw-int-64>) <raw-bool> ((ccode . "int_64_fit_in_30_q") (bytecode . 167))) #(raw-int-64-zero? (<raw-int-64>) <raw-bool> ((ccode . "int_64_zero_q") (bytecode . 166))) #(raw-int-64<=? (<raw-int-64> <raw-int-64>) <raw-bool> ((ccode . "int_64_le") (bytecode . 165))) #(raw-int-64<? (<raw-int-64> <raw-int-64>) <raw-bool> ((ccode . "int_64_lt") (bytecode . 164))) #(raw-int-64>=? (<raw-int-64> <raw-int-64>) <raw-bool> ((ccode . "int_64_ge") (bytecode . 163))) #(raw-int-64>? (<raw-int-64> <raw-int-64>) <raw-bool> ((ccode . "int_64_gt") (bytecode . 162))) #(raw-int-64=? (<raw-int-64> <raw-int-64>) <raw-bool> ((ccode . "int_64_eq") (bytecode . 161))) #(raw-int->raw-int-64 (<raw-int>) <raw-int-64> ((ccode . "int_32_to_int_64") (bytecode . 160))) #(raw-int-64->raw-int (<raw-int-64>) <raw-int> ((ccode . "int_64_to_int_32") (bytecode . 159))) #(raw-int-64->float (<raw-int-64>) <raw-float> ((ccode . "int_64_to_float") (bytecode . 158))) #(fixnum->raw-int-64 (<fixnum>) <raw-int-64> ((ccode . "fx2int64") (bytecode . 157))) #(float-truncate-64 (<raw-float>) <raw-int-64> ((ccode . "float_to_int_64") (bytecode . 156))) #(raw-int-64->long-int (<raw-int-64>) <long-int> ((ccode . "make_long_int") (bytecode . 155))) #(raw-int-64->raw-int (<raw-int-64>) <raw-int> ((ccode . "int_64_to_int_32") (bytecode . 154))) #(raw-int-64->integer (<raw-int-64>) <obj> ((ccode . "int_64_compact") (bytecode . 153))) #(long-int->raw-int-64 (<long-int>) <raw-int-64> ((ccode . "extract_int_64") (bytecode . 152))) #(long-int? (<obj>) <raw-bool> ((ccode . "LONG_INT_P") (bytecode . 151))) #(bvec-write-float-64 (<bvec> <raw-int> <raw-float>) #f ((ccode . "bvec_write_ieee64") (bytecode . 150))) #(bvec-read-float-64 (<bvec> <raw-int>) <raw-float> ((ccode . "bvec_read_ieee64") (bytecode . 149))) #(bvec-write-float-32 (<bvec> <raw-int> <raw-float-32>) #f ((ccode . "bvec_write_ieee32") (bytecode . 148))) #(bvec-read-float-32 (<bvec> <raw-int>) <raw-float-32> ((ccode . "bvec_read_ieee32") (bytecode . 147))) #(bvec-write-signed-64 (<bvec> <raw-int> <raw-int-64>) #f ((ccode . "bvec_write_int64") (bytecode . 146))) #(bvec-read-signed-64 (<bvec> <raw-int>) <raw-int-64> ((ccode . "bvec_read_int64") (bytecode . 145))) #(bvec-write-signed-32 (<bvec> <raw-int> <raw-int>) #f ((ccode . "bvec_write_int32") (bytecode . 144))) #(bvec-read-signed-32 (<bvec> <raw-int>) <raw-int> ((ccode . "bvec_read_int32") (bytecode . 143))) #(bvec-write-unsigned-16 (<bvec> <raw-int> <raw-int>) #f ((ccode . "bvec_write_uint16") (bytecode . 142))) #(bvec-write-unsigned-8 (<bvec> <raw-int> <raw-int>) #f ((ccode . "bvec_write_uint8") (bytecode . 141))) #(bvec-write-signed-16 (<bvec> <raw-int> <raw-int>) #f ((ccode . "bvec_write_int16") (bytecode . 140))) #(bvec-write-signed-8 (<bvec> <raw-int> <raw-int>) #f ((ccode . "bvec_write_int8") (bytecode . 139))) #(bvec-read-unsigned-16 (<bvec> <raw-int>) <raw-int> ((ccode . "bvec_read_uint16") (bytecode . 138))) #(bvec-read-unsigned-8 (<bvec> <raw-int>) <raw-int> ((ccode . "bvec_read_uint8") (bytecode . 137))) #(bvec-read-signed-16 (<bvec> <raw-int>) <raw-int> ((ccode . "bvec_read_int16") (bytecode . 136))) #(bvec-read-signed-8 (<bvec> <raw-int>) <raw-int> ((ccode . "bvec_read_int8") (bytecode . 135))) #(bvec-length (<bvec>) <raw-int> ((ccode . "SIZEOF_PTR") (bytecode . 134))) #(bvec-copy (<bvec> <raw-int> <bvec> <raw-int> <raw-int>) #f ((ccode . "bvec_copy") (bytecode . 133))) #(bvec-set! (<bvec> <raw-int> <raw-int>) #f ((ccode . "bvec_write_uint8") (bytecode . 132))) #(bvec-ref (<bvec> <raw-int>) <raw-int> ((ccode . "bvec_read_uint8") (bytecode . 131))) #(clone2 (<obj> <<class>>) <obj> ((ccode . "clone2") (bytecode . 130))) #(clone (<obj>) <obj> ((ccode . "clone") (bytecode . 129))) #(gvec-alloc-in-area (<obj> <<class>> <raw-int-bytes> <obj>) <gvec> ((ccode . "make_gvec_in_area") (bytecode . 128))) #(bvec-alloc-in-area (<obj> <<class>> <raw-int> <raw-int>) <bvec> ((ccode . "make_bvec_in_area") (bytecode . 127))) #(os-sleep (<raw-int>) <raw-int> ((ccode . "os_sleep") (bytecode . 126))) #(os-halt-timer () <raw-int> ((ccode . "os_halt_timer") (bytecode . 125))) #(os-get-time-remaining () <raw-int> ((ccode . "os_get_time_remaining") (bytecode . 124))) #(os-set-timer (<raw-int>) #f ((ccode . "os_set_timer") (bytecode . 123))) #(vector-set! (<obj> <obj> <obj>) <obj> ((ccode . "vector_set") (bytecode . 122))) #(vector-ref (<obj> <obj>) <obj> ((ccode . "vector_ref") (bytecode . 121))) #(os-file-exists? (<raw-string>) <raw-bool> ((ccode . "os_file_exists_p") (bytecode . 120))) #(set-dynamic-state-reg! (<obj>) #f ((ccode . "SET_DYNAMIC_STATE_REG") (bytecode . 119))) #(get-dynamic-state-reg () <obj> ((ccode . "GET_DYNAMIC_STATE_REG") (bytecode . 118))) #(assert-type (<raw-bool>) #f ((ccode . "assert_type") (bytecode . 117))) #(transient->hash (<obj>) <fixnum> ((ccode . "obj_hash") (bytecode . 116))) #(tuple->hash (<obj> <obj>) <fixnum> ((ccode . "obj_hash2") (bytecode . 115))) #(immob->hash (<obj>) <fixnum> ((ccode . "obj_hash") (bytecode . 114))) #(symbol->hash (<symbol>) <fixnum> ((ccode . "symbol_hash") (bytecode . 113))) #(integer->hash (<fixnum>) <fixnum> ((ccode . "rehash_fixnum") (bytecode . 112))) #(string-ci->hash (<string>) <fixnum> ((ccode . "hash_string_ci") (bytecode . 111))) #(string->hash (<string>) <fixnum> ((ccode . "hash_string") (bytecode . 110))) #(bvec-ci->hash (<bvec> <raw-int> <raw-int>) <fixnum> ((ccode . "bvec_ci_hash") (bytecode . 109))) #(bvec->hash (<bvec> <raw-int> <raw-int>) <fixnum> ((ccode . "bvec_hash") (bytecode . 108))) #(table-values->list (<obj>) <obj> ((ccode . "hashtable_values_to_list") (bytecode . 107))) #(table-keys->list (<obj>) <obj> ((ccode . "hashtable_keys_to_list") (bytecode . 106))) #(table-chains (<obj>) <obj> ((ccode . "hashtable_chains") (bytecode . 105))) #(table-install! (<obj> <fixnum> <obj> <obj>) #f ((ccode . "hashtable_install") (bytecode . 104))) #(object-table-probe? (<obj> <fixnum> <obj>) <raw-bool> ((ccode . "objecttable_probe") (bytecode . 103))) #(object-table-remove! (<obj> <fixnum> <obj>) <obj> ((ccode . "objecttable_remove") (bytecode . 102))) #(object-table-insert! (<obj> <fixnum> <obj> <obj>) <obj> ((ccode . "objecttable_insert") (bytecode . 101))) #(object-table-lookup (<obj> <fixnum> <obj>) <obj> ((ccode . "objecttable_lookup") (bytecode . 100))) #(string-ci-table-probe? (<obj> <fixnum> <string>) <raw-bool> ((ccode . "cistringtable_probe") (bytecode . 99))) #(string-ci-table-remove! (<obj> <fixnum> <string>) <obj> ((ccode . "cistringtable_remove") (bytecode . 98))) #(string-ci-table-insert! (<obj> <fixnum> <string> <obj>) <obj> ((ccode . "cistringtable_insert") (bytecode . 97))) #(string-ci-table-lookup (<obj> <fixnum> <string>) <obj> ((ccode . "cistringtable_lookup") (bytecode . 96))) #(string-table-probe? (<obj> <fixnum> <string>) <raw-bool> ((ccode . "stringtable_probe") (bytecode . 95))) #(string-table-remove! (<obj> <fixnum> <string>) <obj> ((ccode . "stringtable_remove") (bytecode . 94))) #(string-table-insert! (<obj> <fixnum> <string> <obj>) <obj> ((ccode . "stringtable_insert") (bytecode . 93))) #(string-table-lookup (<obj> <fixnum> <string>) <obj> ((ccode . "stringtable_lookup") (bytecode . 92))) #(rscheme-global-set! (<raw-int-bytes> <obj>) <obj> ((ccode . "rscheme_global_set") (bytecode . 91))) #(rscheme-global-ref (<raw-int-bytes>) <obj> ((ccode . "rscheme_global_ref") (bytecode . 90))) #(string-length% (<string>) <raw-int> ((ccode . "string_length") (bytecode . 89))) #(string-ci-compare (<string> <string>) <raw-int> ((ccode . "string_ci_cmp") (bytecode . 88))) #(string-compare (<string> <string>) <raw-int> ((ccode . "string_cmp") (bytecode . 87))) #(string-ci=? (<string> <string>) <raw-bool> ((ccode . "string_ci_eq") (bytecode . 86))) #(string=? (<string> <string>) <raw-bool> ((ccode . "string_eq") (bytecode . 85))) #(symbol->string (<symbol>) <string> ((ccode . "symbol_str") (bytecode . 84))) #(string->symbol (<string>) <symbol> ((ccode . "intern") (bytecode . 83))) #(int-modulo (<raw-int> <raw-int>) <raw-int> ((ccode . "MOD") (bytecode . 82))) #(int-remainder (<raw-int> <raw-int>) <raw-int> ((ccode . "REMDR") (bytecode . 81))) #(arithmetic-shift-left (<obj> <raw-int>) <obj> ((ccode . "basic_ashl") (bytecode . 80))) #(logical-shift-left (<obj> <raw-int>) <obj> ((ccode . "basic_lshl") (bytecode . 79))) #(arithmetic-shift-right (<obj> <raw-int>) <obj> ((ccode . "basic_ashr") (bytecode . 78))) #(logical-shift-right (<obj> <raw-int>) <obj> ((ccode . "basic_lshr") (bytecode . 77))) #(bitwise-not (<obj>) <obj> ((ccode . "basic_bitwise_not") (bytecode . 76))) #(bitwise-xor (<obj> <obj>) <obj> ((ccode . "basic_bitwise_xor") (bytecode . 75))) #(bitwise-or (<obj> <obj>) <obj> ((ccode . "basic_bitwise_or") (bytecode . 74))) #(bitwise-and (<obj> <obj>) <obj> ((ccode . "basic_bitwise_and") (bytecode . 73))) #(fixnum-words->raw-int-bytes (<fixnum>) <raw-int-bytes> ((ccode . "FXWORDS_TO_RIBYTES") (bytecode . 72))) #(raw-int-words->raw-int-bytes (<raw-int>) <raw-int-bytes> ((ccode . "SLOT") (bytecode . 71))) #(raw-int-bytes->raw-int-words (<raw-int-bytes>) <raw-int> ((ccode . "RAW_DIV4") (bytecode . 70))) #(raw-int-bytes->fixnum-words (<raw-int-bytes>) <fixnum> ((ccode . "RIBYTES_TO_FXWORDS") (bytecode . 69))) #(obj-bits-reform (<fixnum> <fixnum>) <obj> ((ccode . "OBJ_FROM_HI_LO") (bytecode . 68))) #(obj-low-bits (<obj>) <fixnum> ((ccode . "OBJ_LOW_HALF_FX") (bytecode . 67))) #(obj-high-bits (<obj>) <fixnum> ((ccode . "OBJ_HIGH_HALF_FX") (bytecode . 66))) #(raw-float->double-float (<raw-float>) <double-float> ((ccode . "make_float") (bytecode . 65))) #(double-float->raw-float (<double-float>) <raw-float> ((ccode . "extract_float") (bytecode . 64))) #(raw-str->string (<raw-string>) <string> ((ccode . "make_string") (bytecode . 63))) #(string->raw-str (<string>) <raw-string> ((ccode . "string_text") (bytecode . 62))) #(obj->raw-bool (<obj>) <raw-bool> ((ccode . "truish") (bytecode . 61))) #(raw-bool->bool (<raw-bool>) <boolean> ((ccode . "rb_to_bo") (bytecode . 60))) #(raw-int->fixnum (<raw-int>) <fixnum> ((ccode . "int2fx") (bytecode . 59))) #(fixnum->raw-int (<fixnum>) <raw-int> ((ccode . "fx2int") (bytecode . 58))) #(float=? (<raw-float> <raw-float>) <raw-bool> ((ccode . "FLT_EQ") (bytecode . 57))) #(float<=? (<raw-float> <raw-float>) <raw-bool> ((ccode . "FLT_LE") (bytecode . 56))) #(float<? (<raw-float> <raw-float>) <raw-bool> ((ccode . "FLT_LT") (bytecode . 55))) #(float>=? (<raw-float> <raw-float>) <raw-bool> ((ccode . "FLT_GE") (bytecode . 54))) #(float>? (<raw-float> <raw-float>) <raw-bool> ((ccode . "FLT_GT") (bytecode . 53))) #(fixnum<=? (<fixnum> <fixnum>) <raw-bool> ((ccode . "FX_LE") (bytecode . 52))) #(fixnum<? (<fixnum> <fixnum>) <raw-bool> ((ccode . "FX_LT") (bytecode . 51))) #(fixnum>=? (<fixnum> <fixnum>) <raw-bool> ((ccode . "FX_GE") (bytecode . 50))) #(fixnum>? (<fixnum> <fixnum>) <raw-bool> ((ccode . "FX_GT") (bytecode . 49))) #(float-neg (<raw-float>) <raw-float> ((ccode . "FLT_NEG") (bytecode . 48))) #(float/ (<raw-float> <raw-float>) <raw-float> ((ccode . "FLT_DIV") (bytecode . 47))) #(float* (<raw-float> <raw-float>) <raw-float> ((ccode . "FLT_MUL") (bytecode . 46))) #(float- (<raw-float> <raw-float>) <raw-float> ((ccode . "FLT_SUB") (bytecode . 45))) #(float+ (<raw-float> <raw-float>) <raw-float> ((ccode . "FLT_ADD") (bytecode . 44))) #(fixnum-quotient (<fixnum> <fixnum>) <fixnum> ((ccode . "FX_DIV") (bytecode . 43))) #(fixnum* (<fixnum> <fixnum>) <fixnum> ((ccode . "FX_MUL") (bytecode . 42))) #(div2 (<fixnum>) <fixnum> ((ccode . "DIV2") (bytecode . 41))) #(mul2 (<fixnum>) <fixnum> ((ccode . "MUL2") (bytecode . 40))) #(sub1 (<fixnum>) <fixnum> ((ccode . "SUB1") (bytecode . 39))) #(add1 (<fixnum>) <fixnum> ((ccode . "ADD1") (bytecode . 38))) #(fixnum- (<fixnum> <fixnum>) <fixnum> ((ccode . "FX_SUB") (bytecode . 37))) #(fixnum+ (<fixnum> <fixnum>) <fixnum> ((ccode . "FX_ADD") (bytecode . 36))) #(set-cdr! (<pair> <obj>) #f ((ccode . "pair_set_cdr") (bytecode . 35))) #(set-car! (<pair> <obj>) #f ((ccode . "pair_set_car") (bytecode . 34))) #(make-immob (<raw-int> <raw-int>) <immob> ((ccode . "MAKE_IMMOB") (bytecode . 33))) #(get-immob-value (<immob>) <raw-int> ((ccode . "GET_IMMEDIATE_VALUE") (bytecode . 32))) #(immob->fixnum (<immob>) <fixnum> ((ccode . "IMMOB_TO_FX") (bytecode . 31))) #(fixnum->immob (<fixnum>) <immob> ((ccode . "FX_TO_IMMOB") (bytecode . 30))) #(unicode-char->integer (<unicode-char>) <raw-int> ((ccode . "GET_IMMEDIATE_VALUE") (bytecode . 29))) #(ascii-char->integer (<ascii-char>) <raw-int> ((ccode . "GET_IMMEDIATE_VALUE") (bytecode . 28))) #(integer->unicode-char (<raw-int>) <unicode-char> ((ccode . "MAKE_UNICODE_CHAR") (bytecode . 27))) #(integer->ascii-char (<raw-int>) <ascii-char> ((ccode . "MAKE_ASCII_CHAR") (bytecode . 26))) #(subclass? (<<class>> <<class>>) <raw-bool> ((ccode . "subclass_p") (bytecode . 25))) #(instance? (<obj> <<class>>) <raw-bool> ((ccode . "instance_p") (bytecode . 24))) #(object-class (<obj>) <<class>> ((ccode . "object_class") (bytecode . 23))) #(bvec-alloc (<<class>> <raw-int>) <bvec> ((ccode . "make_bvec") (bytecode . 22))) #(bvec? (<obj>) <raw-bool> ((ccode . "BVEC_P") (bytecode . 21))) #(gvec-set! (<gvec> <raw-int-bytes> <obj>) #f ((ccode . "gvec_set") (bytecode . 20))) #(gvec-ref (<gvec> <raw-int-bytes>) <obj> ((ccode . "gvec_ref") (bytecode . 19))) #(gvec-length (<gvec>) <raw-int-bytes> ((ccode . "SIZEOF_PTR") (bytecode . 18))) #(gvec-alloc (<<class>> <raw-int-bytes> <obj>) <gvec> ((ccode . "make_gvec") (bytecode . 17))) #(gvec? (<obj>) <raw-bool> ((ccode . "GVEC_P") (bytecode . 16))) #(not (<obj>) <raw-bool> ((ccode . "NOT") (bytecode . 15))) #(eq? (<obj> <obj>) <raw-bool> ((ccode . "EQ") (bytecode . 14))) #(double-float? (<obj>) <raw-bool> ((ccode . "LONGFLOAT_P") (bytecode . 13))) #(string? (<obj>) <raw-bool> ((ccode . "STRING_P") (bytecode . 12))) #(vector? (<obj>) <raw-bool> ((ccode . "VECTOR_P") (bytecode . 11))) #(symbol? (<obj>) <raw-bool> ((ccode . "SYMBOL_P") (bytecode . 10))) #(unique-obj? (<obj>) <raw-bool> ((ccode . "OBJ_ISA_UNIQUE_OBJ") (bytecode . 9))) #(unicode-char? (<obj>) <raw-bool> ((ccode . "OBJ_ISA_UNICODE_CHAR") (bytecode . 8))) #(ascii-char? (<obj>) <raw-bool> ((ccode . "OBJ_ISA_ASCII_CHAR") (bytecode . 7))) #(class? (<obj>) <raw-bool> ((ccode . "CLASS_P") (bytecode . 6))) #(pair? (<obj>) <raw-bool> ((ccode . "PAIR_P") (bytecode . 5))) #(null? (<obj>) <raw-bool> ((ccode . "NULL_P") (bytecode . 4))) #(boolean? (<obj>) <raw-bool> ((ccode . "OBJ_ISA_BOOLEAN") (bytecode . 3))) #(ptr? (<obj>) <raw-bool> ((ccode . "OBJ_ISA_PTR") (bytecode . 2))) #(immob? (<obj>) <raw-bool> ((ccode . "OBJ_ISA_IMMOB") (bytecode . 1))) #(fixnum? (<obj>) <raw-bool> ((ccode . "OBJ_ISA_FIXNUM") (bytecode . 0))))